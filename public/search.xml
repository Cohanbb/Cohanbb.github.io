<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HTML 与 CSS</title>
    <url>/2022/05/16/HTML%20%E4%B8%8E%20CSS/</url>
    <content><![CDATA[<p>前端 HTML 与 CSS 的基础知识整理。<br />
内容包括：<br />
1.HTML 常用标签及其用法<br />
2.CSS 常用属性及其描述</p>
<span id="more"></span>
<hr>
<p><strong>文章索引</strong></p>
<ul>
<li><a href="#摘要">摘要</a></li>
<li><a href="#html">HTML</a>
<ul>
<li><a href="#简介">简介</a></li>
<li><a href="#基本架构">基本架构</a></li>
<li><a href="#html-标签">HTML 标签</a>
<ul>
<li><a href="#基本标签">基本标签</a></li>
<li><a href="#文本格式化">文本格式化</a></li>
<li><a href="#特殊标签">特殊标签</a></li>
</ul></li>
</ul></li>
<li><a href="#css">CSS</a>
<ul>
<li><a href="#简介-1">简介</a></li>
<li><a href="#css-语法">CSS 语法</a>
<ul>
<li><a href="#基本形式">基本形式</a></li>
<li><a href="#文本属性">文本属性</a></li>
<li><a href="#结构属性">结构属性</a></li>
</ul></li>
</ul></li>
</ul>
<hr>
<h1 id="摘要">摘要</h1>
<p>一个 Web 页面是如何在浏览器上展示的？我们在浏览器上查看网页源代码，可看到众多的标签、符号和文字，这就是一个 HTML 文件，而浏览器可以将这个文件解析成一个 Web 页面。一个 Web 页面如何设计样式、呈现出精美的视觉效果？则需要通过 CSS 对 HTML 进行加工美化。</p>
<h1 id="html">HTML</h1>
<h2 id="简介">简介</h2>
<p>HTML(HyperText Markup Language) <strong>超文本</strong>标记语言，何谓超文本？简单来说，超文本指具有超链接功能的文本，即一个超文本可以由若干个超链接构成，最常见的应用场景便是 Web 页面，也用于其他领域，譬如 Mardown 文档。</p>
<h2 id="基本架构">基本架构</h2>
<p><code>html</code> 标签：表明是一个 HTML 文档。<br />
<code>&lt;title&gt;</code> 标签：定义文档的标题。<br />
<code>&lt;body&gt;</code> 标签：定义文档的内容主体。<br />
<code>&lt;p&gt;</code> 标签：定义一个段落。<br />
<code>&lt;br /&gt;</code> 标签：换行标签。</p>
<p><strong>注：莫要忘记加上结束标签！</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">			Hello World!<span class="tag">&lt;<span class="name">br</span> /&gt;</span>Hello Web! </span><br><span class="line">		<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
这段代码在浏览器中的效果：
<html>
<title>
demo
</title>
<body>
<p>
Hello World!<br />Hello Web!
</p>
</body>
</html>
<h2 id="html-标签">HTML 标签</h2>
<h3 id="基本标签">基本标签</h3>
<p><code>html</code> 标签：表示是一个 HTML 文档。<br />
<code>&lt;title&gt;</code> 标签：定义文档的标题。<br />
<code>&lt;body&gt;</code> 标签：定义文档的内容主体。<br />
<code>&lt;p&gt;</code> 标签：定义一个段落。<br />
<code>&lt;br /&gt;</code> 标签：表示换行。<br />
<code>&lt;h&gt;</code> 标签：定义文本中的标题。<br />
<code>&lt;hr&gt;</code> 标签：表示一条水平分割线。<br />
<code>&lt;!-- --&gt;</code> 标签：定义注释。</p>
<h3 id="文本格式化">文本格式化</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>粗体<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>斜体<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>强调文字<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">small</span>&gt;</span>小号文字<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>加重视觉效果<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sub</span>&gt;</span>上标<span class="tag">&lt;/<span class="name">sub</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sup</span>&gt;</span>下标<span class="tag">&lt;/<span class="name">sup</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ins</span>&gt;</span>插入字<span class="tag">&lt;/<span class="name">ins</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>删除字<span class="tag">&lt;/<span class="name">del</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>这段代码解析后为：</p>
<p><b>粗体</b><br /> <i>斜体</i><br /> <em>强调文字</em><br /> <small>小号文字</small><br /> <strong>加重视觉效果</strong><br /> <sub>上标</sub><br /> <sup>下标</sup><br /> <ins>插入字</ins><br /> <del>删除字</del><br /></p>
<h3 id="特殊标签">特殊标签</h3>
<p><strong>链接</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://cohanbb.github.io/&quot;</span>&gt;</span>这是一条链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><a href="http://cohanbb.github.io/">这是一条链接</a></p>
<p><strong>图像</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://i-1-lanrentuku.52tup.com/2020/7/10/b87c8e05-344a-48d1-869f-ef6929fc8b17.jpg?imageView2/2/w/1024/&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片加载失败&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://i-1-lanrentuku.52tup.com/2020/7/10/b87c8e05-344a-48d1-869f-ef6929fc8b17.jpg?imageView2/2/w/1024/" alt="图片加载失败" width="300" height="300"/></p>
<p><strong>预格式文本</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">	预格式文本</span><br><span class="line">		文本会保留换行和空格</span><br><span class="line">			文本换为等线体，常用于表示代码块</span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>
<pre>
    预格式文本
        文本会保留换行和空格
            文本换为等线体，常用于表示代码块
</pre>
<p><strong>代码和代码块</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span>printf(&#x27;代码&#x27;)<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">code</span>&gt;</span>printf(&#x27;代码块&#x27;);<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">code</span>&gt;</span>return;<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>printf('代码')</code></p>
<pre>
    <code>printf('代码块');</code>
    <code>return;</code>
</pre>
<p><strong>表格</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">th</span>&gt;</span>标题1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">th</span>&gt;</span>标题2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>row 1, cell 1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>row 1, cell 2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>row 2, cell 1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>row 2, cell 2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<table border="1">
<tr>
<th>
标题1
</th>
<th>
标题2
</th>
</tr>
<tr>
<td>
row 1, cell 1
</td>
<td>
row 1, cell 2
</td>
</tr>
<tr>
<td>
row 2, cell 1
</td>
<td>
row 2, cell 2
</td>
</tr>
</table>
<p><strong>列表</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">有序列表</span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>YES<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>NO<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">无序列表</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>yes<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>no<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">自定义列表</span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dt</span>&gt;</span>YES<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>yes<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dt</span>&gt;</span>NO<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>no<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>
有序列表
<ol>
<li>
YES
</li>
<li>
NO
</li>
</ol>
无序列表
<ul>
<li>
yes
</li>
<li>
no
</li>
</ul>
自定义列表
<dl>
<dt>
YES
</dt>
<dd>
yes
</dd>
<dt>
NO
</dt>
<dd>
no
</dd>
</dl>
<p><strong>引用</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span> </span><br><span class="line">	一级引用</span><br><span class="line">	<span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></span><br><span class="line">		二级引用</span><br><span class="line">	<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
一级引用
<blockquote>
二级引用
</blockquote>
</blockquote>
<p><strong>块级元素和内联元素</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1.这是一个<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">块级元素<span class="tag">&lt;<span class="name">br</span> /&gt;</span>从新的一行出现以及结束</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">2.这是一个<span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">内联元素，不会以新行开始</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
1.这是一个
<div>
<p>块级元素<br />从新的一行出现以及结束</p>
</div>
<p>2.这是一个<span> 内联元素，不会以新行开始 </span></p>
<p><strong>表单</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;URL&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get or post&quot;</span>&gt;</span></span><br><span class="line">	username: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">	password: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">	单选框<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span>男<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女<span class="tag">&lt;<span class="name">br</span> /&gt;</span>	</span><br><span class="line">	复选框<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;number&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;number&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">	提交表单<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<form action="URL" method="get or post">
username: <input type="text" name="username"><br /> password: <input type="password" name="password"><br /> 单选框<br /> <input type="radio" name="sex" value="male">男<br /> <input type="radio" name="sex" value="female">女<br /><br />
复选框<br /> <input type="checkbox" name="number" value="1">1<br /> <input type="checkbox" name="number" value="2">2<br /> 提交表单<br /> <input type="submit" value="submit"/>
</form>
<p><strong>脚本</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	script code, such <span class="keyword">as</span> <span class="title class_">JavaScript</span>.</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>样式</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">	css <span class="selector-tag">code</span></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="css">CSS</h1>
<h2 id="简介-1">简介</h2>
<p>CSS(Cascading Style Sheets) 层叠样式表，用以定义 HTML 中元素的样式，HTML 使用 CSS 的方式有三种： 1. 内联样式：在 HTML 元素标签中使用 "style" 属性。</p>
<pre><code><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:blue;font-family:consolas;&quot;</span>&gt;</span></span><br><span class="line">	inline</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></code></pre>
<ol start="2" type="1">
<li><p>内部样式表：在 HTML 文档 <code>&lt;header&gt;</code> 区域使用 <code>&lt;style&gt;</code> 包含 CSS。</p>
<p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">	CSS <span class="selector-tag">code</span></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>外部引用：使用外部 CSS 文件定义样式。</p>
<p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;xxx.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></p></li>
</ol>
<h2 id="css-语法">CSS 语法</h2>
<h3 id="基本形式">基本形式</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[选择器]</span> &#123;</span><br><span class="line">	<span class="selector-attr">[属性]</span>: [描述];</span><br><span class="line">		......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>选择器可以是 HTML 标签，也可以是 id 或 class。 * id 选择器只能定义标有特定 id 的元素的样式，形式为 <code>#[id]</code>。 * class 选择器可以定义一类元素的样式，形式为 <code>.[class]</code>。</p>
<h3 id="文本属性">文本属性</h3>
<p><strong>background</strong></p>
<ul>
<li><p>background-color:</p>
<blockquote>
<p>三种定义方式：RGB "rgb(x,x,x)"，十六进制 "#H H H"， name "black"。</p>
</blockquote></li>
<li><p>background-image:</p>
<blockquote>
<p>url('pic-url')</p>
</blockquote></li>
<li><p>background-repeat：背景图像在哪个方向重复。</p>
<blockquote>
<p>repeat, repeats-x, repeat-y, no-repeat</p>
</blockquote></li>
<li><p>background-attachment：背景图像是否跟随页面滚动。</p></li>
<li><p>background-position：背景图像的位置。</p></li>
</ul>
<p><strong>text</strong></p>
<ul>
<li><p>color：文本颜色。</p></li>
<li><p>direction：文本方向。</p></li>
<li><p>letter-spacing：字符间隔。</p></li>
<li><p>word-spacing：单词间隔。</p></li>
<li><p>line-height：行高。</p></li>
<li><p>text-align：对齐方式。</p>
<blockquote>
<p>left, right, center, justify, inherit</p>
</blockquote></li>
<li><p>text-indent：首行缩紧。</p></li>
<li><p>text-shadow：文本阴影。</p></li>
<li><p>text-decoration：文本画线修饰。</p></li>
<li><p>white-space：空白元素的处理方式。</p>
<blockquote>
<p>默认 normal，即空白元素会被浏览器忽略。<br />
nowrap 文本不会换行，一直到 <code>&lt;br&gt;</code> 标签。<br />
pre 保留空白，pre-wrap 保留空白，但是正常换行。<br />
pre-line 合并空白元素，但是保留一个空格，正常换行。</p>
</blockquote></li>
<li><p>word-wrap：单词的换行方式，一般用 break-word。</p></li>
<li><p>word-break：是否允许单词内断开，若用 break-all，则会在单词内部断开。</p></li>
</ul>
<p><strong>font</strong></p>
<ul>
<li><p>font-family：</p>
<table>
<thead>
<tr class="header">
<th>说明</th>
<th>Generic-family</th>
<th>特定系列</th>
<th>具体字体</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>有衬线体</td>
<td>Serif</td>
<td>Times, Georgia</td>
<td>"Times New Roman", "Geogria", "宋体", "仿宋"</td>
</tr>
<tr class="even">
<td>无衬线体</td>
<td>Sans-serif</td>
<td>Sans-serif</td>
<td>"Arial", "Helvetica", Verdana", "黑体" 等</td>
</tr>
<tr class="odd">
<td>等宽体</td>
<td>Monospace</td>
<td>Consolas</td>
<td>"Courier", "Courier New", "Lucinda Console"等</td>
</tr>
</tbody>
</table></li>
<li><p>font-size：</p>
<blockquote>
CSS 中表示字体大小有多种形式：
<ol type="1">
<li>px 像素值。</li>
<li>pt 磅(= 0.75px)。</li>
<li>em 相对父元素的大小。</li>
<li>rem 相对于 html 标签中 font-size 的大小，默认 1rem = 16px。</li>
<li>percentage 同 em。</li>
<li>使用绝对大小和相对大小值。</li>
</ol>
</blockquote></li>
<li><p>font-style：斜体样式。</p></li>
<li><p>font-weight：字体粗细。</p></li>
</ul>
<p><strong>链接</strong></p>
<ul>
<li>a:link：未访问过的链接。</li>
<li>a:visited：已访问过的链接。</li>
<li>a:hover：鼠标放置的链接。</li>
<li>a:active：鼠标点击的链接。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> or visited or hover or active &#123;</span><br><span class="line">	<span class="attribute">background-color</span>:; <span class="comment">/*链接背景颜色*/</span></span><br><span class="line">	<span class="attribute">color</span>:; <span class="comment">/*链接字体颜色*/</span></span><br><span class="line">	<span class="attribute">text-decoration</span>:; <span class="comment">/*链接文本画线修饰*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="结构属性">结构属性</h3>
<p><strong>盒子模型</strong><br />
所有的 HTML 元素都可以看成一个盒子模型，包括外边距(margin)、边框(border)、内边距(padding)、内容(content)，内容指的是文本或图像等。</p>
<p><img src="https://www.runoob.com/images/box-model.gif" /></p>
<p><strong>margin</strong></p>
<table>
<thead>
<tr class="header">
<th>属性</th>
<th>说明</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>margin-top</td>
<td>上边距</td>
<td>auto, length, percentage</td>
</tr>
<tr class="even">
<td>margin-right</td>
<td>右边距</td>
<td>auto, length, percentage</td>
</tr>
<tr class="odd">
<td>margin-bottom</td>
<td>下边距</td>
<td>auto, length, percentage</td>
</tr>
<tr class="even">
<td>margin-left</td>
<td>左边距</td>
<td>auto, length, percentage</td>
</tr>
<tr class="odd">
<td>margin</td>
<td>以上四个可简写为 margin</td>
<td>按个数 4，3，2，1 依次表示：<br /> 上，右，下，左；上，左右，下；上下，左右；全部外边距。</td>
</tr>
</tbody>
</table>
<p><strong>border</strong></p>
<ul>
<li><p>border-width：边框的宽度。</p>
<blockquote>
<ol type="1">
<li>可以用 thin, medium, thick, length, inherit 表示。</li>
<li>按个数 4，3，2，1 依次表示：上，右，下，左；上，左右，下；上下，左右；全部边框的宽度。</li>
</ol>
</blockquote></li>
<li><p>border-color：边框的颜色。</p>
<blockquote>
<ol type="1">
<li>RGB 十六进制 name 三种表示法。</li>
<li>按个数 4，3，2，1 依次表示：上，右，下，左；上，左右，下；上下，左右；全部边框的颜色。</li>
</ol>
</blockquote></li>
<li><p>border-style：边框的风格。</p>
<blockquote>
<ol type="1">
<li>无边框 none，点线边框 dotted，虚线边框 dashed，实线边框 solid，两个实线边框 double，3D沟槽边框 groove，3D脊边框 ridge，3D嵌入边框 inset，3D突出边框 outset。</li>
<li>按个数 4，3，2，1 依次表示： 上，右，下，左；上，左右，下；上下，左右；全部边框的风格。</li>
</ol>
</blockquote></li>
<li><p>border-[none/top/right/bottom/left]：以上三个简写。</p>
<blockquote>
<p>参数依次为：[width],[style],[color]</p>
</blockquote></li>
<li><p>border-radius：设置圆角边框。</p>
<blockquote>
<p>length 或 percentage。</p>
</blockquote></li>
<li><p>border-[top/right/bottom/left]-[width/style/color]：设置某一边的某一个属性。</p></li>
</ul>
<p><strong>padding</strong><br />
使用方法与 margin 类似。</p>
<p><strong>display</strong><br />
典型的块元素：<code>&lt;p&gt;</code> <code>&lt;div&gt;</code> <code>&lt;pre&gt;</code> <code>&lt;h&gt;</code>，典型的内联元素：<code>&lt;a&gt;</code> <code>&lt;span&gt;</code> <code>&lt;code&gt;</code>，display 可以更改元素的显示方式。</p>
<ul>
<li>inline： 内联元素。</li>
<li>block：块元素。</li>
</ul>
<p><strong>overflow</strong></p>
<ul>
<li>visible：默认值，超出的内容会呈现在边框外面。</li>
<li>hidden：溢出内容被修剪，且被隐藏。</li>
<li>scroll：溢出内容被修剪，显示滚动条。</li>
<li>auto：浏览器根据情况自动添加滚动条。</li>
<li>inherit：继承父元素的 overflow 属性值。</li>
</ul>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 HTML/CSS 修饰 Markdown 中的字体格式</title>
    <url>/2022/03/19/HTMLCSS%E4%BF%AE%E9%A5%B0Markdown/</url>
    <content><![CDATA[<p>Markdown 是轻量级的文本标记语言，想要更好、更细致地设置文本则需要借助 HTML/CSS 修饰。</p>
<hr>
<span id="more"></span>
<p><strong>本文索引</strong></p>
<ul>
<li><a href="#使用-htmlcss-修饰-markdown-中的字体格式">使用 HTML/CSS 修饰 Markdown 中的字体格式</a>
<ul>
<li><a href="#颜色和大小">颜色和大小</a></li>
<li><a href="#格式">格式</a></li>
<li><a href="#字体">字体</a></li>
<li><a href="#引用">引用</a></li>
</ul></li>
</ul>
<hr>
<h1 id="使用-htmlcss-修饰-markdown-中的字体格式">使用 HTML/CSS 修饰 Markdown 中的字体格式</h1>
<h2 id="颜色和大小">颜色和大小</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span> <span class="attr">size</span>=<span class="string">6</span> &gt;</span>修改颜色和大小<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:blue; font-size:32px&quot;</span>&gt;</span>修改颜色和大小<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<font color=red size=6 >修改颜色和大小</font>
<p style="color:blue; font-size:32px">
修改颜色和大小
</p>
<h2 id="格式">格式</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">b</span>&gt;</span> <span class="tag">&lt;<span class="name">I</span>&gt;</span>斜体<span class="tag">&lt;/<span class="name">I</span>&gt;</span> <span class="tag">&lt;<span class="name">U</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">U</span>&gt;</span> <span class="tag">&lt;<span class="name">S</span>&gt;</span>删除线<span class="tag">&lt;/<span class="name">S</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sub</span>&gt;</span>下标<span class="tag">&lt;/<span class="name">sub</span>&gt;</span> <span class="tag">&lt;<span class="name">sup</span>&gt;</span>上标<span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><b>加粗</b> <I>斜体</I> <U>下划线</U> <S>删除线</S> <sub>下标</sub> <sup>上标</sup></p>
<h2 id="字体">字体</h2>
<p>常用的几款中、英文字体。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;font-family:Simsun;&quot;</span>&gt;</span>宋体<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;font-family:STKaiti;&quot;</span>&gt;</span>楷体<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;font-family:STHeiti;&quot;</span>&gt;</span>黑体<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;font-family:Times New Roman;&quot;</span>&gt;</span>Times New Roman<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;font-family:Arial;&quot;</span>&gt;</span>Arial<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;font-family:Courier;&quot;</span>&gt;</span>Courier<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;font-family:Consolas;&quot;</span>&gt;</span>Consolas<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p style="font-family:Simsun;">
宋体
</p>
<p style="font-family:STKaiti;">
楷体
</p>
<p style="font-family:STHeiti;">
黑体
</p>
<p style="font-family:Times New Roman;">
Times New Roman
</p>
<p style="font-family:Arial;">
Arial
</p>
<p style="font-family:Courier;">
Courier
</p>
<p style="font-family:Consolas;">
Consolas
</p>
<h2 id="引用">引用</h2>
<p>Markdown 自带的引用 <code>&gt;</code> 并不好用，可使用 HTML 实现。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></span><br><span class="line">第一层</span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></span><br><span class="line">第二层</span><br><span class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line">第一层</span><br><span class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
第一层
<blockquote>
第二层
</blockquote>
第一层
</blockquote>
]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/02/28/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>数据结构_线性表，栈、队列和数组</title>
    <url>/2022/03/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_%E7%BA%BF%E6%80%A7%E8%A1%A8%EF%BC%8C%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<p>数据结构线性表部分的知识总结<br />
内容包括：<br />
1. 线性表的概念和代码实现<br />
2. 栈、队列的概念和代码实现<br />
3. 特殊矩阵的压缩</p>
<hr>
<span id="more"></span>
<p><strong>本文索引</strong></p>
<ul>
<li><a href="#数据结构-线性表栈队列和数组">数据结构-线性表，栈、队列和数组</a>
<ul>
<li><a href="#线性表">线性表</a>
<ul>
<li><a href="#顺序表">顺序表</a>
<ul>
<li><a href="#顺序表的定义和初始化">顺序表的定义和初始化</a></li>
<li><a href="#顺序表的基本操作">顺序表的基本操作</a></li>
</ul></li>
<li><a href="#链表">链表</a>
<ul>
<li><a href="#单链表">单链表</a></li>
<li><a href="#静态链表">静态链表</a></li>
<li><a href="#双向链表">双向链表</a></li>
<li><a href="#循环链表">循环链表</a></li>
</ul></li>
<li><a href="#顺序表和链表的比较">顺序表和链表的比较</a></li>
</ul></li>
<li><a href="#栈队列和数组">栈、队列和数组</a>
<ul>
<li><a href="#栈">栈</a>
<ul>
<li><a href="#顺序栈">顺序栈</a></li>
<li><a href="#链式栈">链式栈</a></li>
</ul></li>
<li><a href="#队列">队列</a>
<ul>
<li><a href="#顺序队列">顺序队列</a></li>
<li><a href="#链式队列">链式队列</a></li>
</ul></li>
<li><a href="#栈和队列的应用">栈和队列的应用</a></li>
<li><a href="#特殊矩阵压缩">特殊矩阵压缩</a></li>
</ul></li>
</ul></li>
</ul>
<hr>
<h1 id="数据结构-线性表栈队列和数组">数据结构-线性表，栈、队列和数组</h1>
<h2 id="线性表">线性表</h2>
<p>线性表是<strong>零或多个相同数据类型的有限序列</strong>。逻辑结构为线性结构，存储结构为顺序存储或链式存储，对应<a href="#顺序表">顺序表</a>或<a href="#链表">链表</a>。<br />
线性表的基本操作：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">InitList</span>(&amp;L); <span class="comment">//初始化</span></span><br><span class="line"><span class="built_in">Empty</span>(L); <span class="comment">//判断是否是空表</span></span><br><span class="line"><span class="built_in">ListInsert</span>(&amp;L, i, e); <span class="comment">//在第 i 个位置插入 e</span></span><br><span class="line"><span class="built_in">ListDelete</span>(&amp;L, i, &amp;e); <span class="comment">//删除第 i 个位置的数据并用 e 返回</span></span><br><span class="line"><span class="built_in">LocateElem</span>(L, e); <span class="comment">//按值查找</span></span><br><span class="line"><span class="built_in">GetElem</span>(L, i); <span class="comment">//按位查找</span></span><br><span class="line"><span class="built_in">Length</span>(L); <span class="comment">//求表长</span></span><br><span class="line"><span class="built_in">PrintList</span>(L); <span class="comment">//打印表</span></span><br><span class="line"><span class="built_in">DestroyList</span>(&amp;L); <span class="comment">//销毁表</span></span><br></pre></td></tr></table></figure>
<h3 id="顺序表">顺序表</h3>
<p>线性表的顺序表示指的是用一组地址连续的存储单元依次存储线性表的数据元素，这种存储结构称为顺序表。</p>
<h4 id="顺序表的定义和初始化">顺序表的定义和初始化</h4>
<p>地址连续的存储结构完全可以使用数组或者一个指向连续地址的指针来实现，故可以轻松写出顺序表的静态创建：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义顺序表</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Maxsize N <span class="comment">//N 为自定义的整数，表示顺序表的最大长度</span></span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Sqlist</span> &#123;</span><br><span class="line">    ElemType data[Maxsize]; <span class="comment">//ElemType 为元素数据类型</span></span><br><span class="line">    <span class="type">int</span> length; <span class="comment">//顺序表实际存储数据的长度</span></span><br><span class="line">&#125;;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//初始化顺序表</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitList</span><span class="params">(<span class="keyword">struct</span> Sqlist &amp;List)</span> </span>&#123;</span><br><span class="line">    List.length = <span class="number">0</span>; <span class="comment">//初始长度为0 </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; Maxsize; i++)</span><br><span class="line">        List.data[i] = <span class="number">0</span>; <span class="comment">//避免脏数据</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//实例化顺序表</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Sqlist</span> L;</span><br><span class="line">    <span class="built_in">InitList</span>(L);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上定义的顺序表的最大长度为 Maxsize，若想顺序表的最大长度可变，则需动态创建：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义顺序表</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Initsize N <span class="comment">//顺序表的初始最大长度</span></span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Sqlist</span> &#123;</span><br><span class="line">    ElemType *data; <span class="comment">//指向顺序表首地址</span></span><br><span class="line">    <span class="type">int</span> maxsize, length;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化顺序表</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitList</span><span class="params">(<span class="keyword">struct</span> Sqlist &amp;List)</span> </span>&#123;</span><br><span class="line">    List.maxsize = Initsize; <span class="comment">//初始最大长度</span></span><br><span class="line">    List.length = <span class="number">0</span>; <span class="comment">//初始长度为0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; List.maxsize; i++)</span><br><span class="line">        List.data[i] = <span class="number">0</span>; <span class="comment">//避免脏数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化顺序表</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Sqlist</span> L;</span><br><span class="line">    L.data = <span class="keyword">new</span> ElemType[Initsize];</span><br><span class="line">    <span class="built_in">InitList</span>(L);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="顺序表的基本操作">顺序表的基本操作</h4>
<p>插入（在表 L 的第 i 个位置插入 e）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListInsert</span><span class="params">(Sqlist &amp;L, <span class="type">int</span> i, ElemType e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L.length+<span class="number">1</span>) <span class="comment">//超出表的实际长度</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (L.length == Maxsize) <span class="comment">//表已达最大长度</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = L.length; j &gt;= i; j--)  <span class="comment">//从第 i 个位置循环后移</span></span><br><span class="line">        L.data[j] = L.data[j<span class="number">-1</span>]; <span class="comment">//赋值给后面的元素</span></span><br><span class="line">    L.data[i<span class="number">-1</span>] = e; <span class="comment">//将第 i 个位置赋值为 e</span></span><br><span class="line">    L.length++; <span class="comment">//实际长度加一</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>删除（删除表 L 的第 i 个元素并用 e 返回删除值）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListDelete</span><span class="params">(Sqlist &amp;L, <span class="type">int</span> i, ElemType &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L.length) <span class="comment">//超出表的实际长度</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    e = L.data[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt;= L.length<span class="number">-1</span>; j++) <span class="comment">//将第 i 个位置后的元素前移</span></span><br><span class="line">        L.data[j<span class="number">-1</span>] = L.data[j]; <span class="comment">//赋值给前面的元素</span></span><br><span class="line">    L.data[L.length<span class="number">-1</span>] = <span class="number">0</span>; <span class="comment">//将末尾的元素设为 0</span></span><br><span class="line">    L.length--; <span class="comment">//实际长度减一</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>按值查找（表 L 中的第一次出现的 e 的位置）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">LocateElem</span><span class="params">(Sqlist &amp;L, ElemType e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L.length; i++)</span><br><span class="line">        <span class="keyword">if</span> (L.data[i] == e)</span><br><span class="line">            <span class="keyword">return</span> i+<span class="number">1</span>; <span class="comment">//找到返回位置</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//未找到</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="链表">链表</h3>
<p>顺序表插入和删除需要移动大量的元素，链表通过指针将逻辑上相邻的元素连接起来，不需要在连续地址上存储。</p>
<h4 id="单链表">单链表</h4>
<p>单链表的每个结点除了要存储自身数据外还要存储指向后继元素的指针。<br />
单链表必须有一个指向链表首地址的<strong>头指针</strong>，有两种定义方式，带头结点和不带头结点。不带头结点的方式更直观但是不方便进行操作。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义结点</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LNode</span> &#123;</span><br><span class="line">    ElemType data; <span class="comment">//自身数据</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LNode</span> *next; <span class="comment">//指向下一个结点</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span> LNode, *LinkList; <span class="comment">//结点，链表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//带头结点初始化</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InitList</span><span class="params">(LinkList &amp;List)</span> </span>&#123;</span><br><span class="line">    List = <span class="keyword">new</span> LNode;</span><br><span class="line">    <span class="keyword">if</span> (List == <span class="literal">NULL</span>) <span class="comment">//创建失败</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    List -&gt; next = <span class="literal">NULL</span>; <span class="comment">//初始为空表</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否为空</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Empty</span><span class="params">(LinkList &amp;List)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> List -&gt; next == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>单链表的基本操作</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//按位查找</span></span><br><span class="line"><span class="function">LNode *<span class="title">GetElem</span><span class="params">(LinkList &amp;List, <span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> List; <span class="comment">//头结点</span></span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span>) <span class="comment">//结点不存在</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    LNode *p = List;</span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; i &gt; <span class="number">0</span>) &#123; </span><br><span class="line">        p = p -&gt; next;</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按值查找</span></span><br><span class="line"><span class="function">LNode *<span class="title">LocateElem</span><span class="params">(LinkList &amp;List, ElemType e)</span> </span>&#123;</span><br><span class="line">    LNode *p = List -&gt; next;</span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; p -&gt; data != e)</span><br><span class="line">        p -&gt; next;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入（后插）</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListInsert</span><span class="params">(LinkList &amp;List, <span class="type">int</span> i, ElemType e)</span> </span>&#123;</span><br><span class="line">    LNode *p = <span class="built_in">GetElem</span>(List, i<span class="number">-1</span>); <span class="comment">//找到前驱结点</span></span><br><span class="line">    <span class="keyword">if</span> (!p)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//在前驱结点后插入</span></span><br><span class="line">    LNode *s = <span class="keyword">new</span> LNode;</span><br><span class="line">    s -&gt; data = e;</span><br><span class="line">    s -&gt; next = p -&gt; next; </span><br><span class="line">    p -&gt; next = s;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拓展：前插</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//先后插</span></span><br><span class="line">    s -&gt; next = p -&gt; next;</span><br><span class="line">    p -&gt; next = s;</span><br><span class="line">    <span class="comment">//交换前后数据</span></span><br><span class="line">    temp = p -&gt; data;</span><br><span class="line">    p -&gt; data = s -&gt; data;</span><br><span class="line">    s -&gt; data = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListDelete</span><span class="params">(LinkList &amp;List, <span class="type">int</span> i, ElemType &amp;e)</span> </span>&#123;</span><br><span class="line">    LNode *p = <span class="built_in">GetElem</span>(List, i<span class="number">-1</span>); <span class="comment">//找到前驱结点 </span></span><br><span class="line">    <span class="keyword">if</span> (!p) </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *q = <span class="keyword">new</span> LNode;</span><br><span class="line">    q = p -&gt; next;</span><br><span class="line">    p -&gt; next = q -&gt; next;</span><br><span class="line">    e = q -&gt; data;</span><br><span class="line">    <span class="keyword">delete</span> q;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>单链表的整表创建和销毁</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//头插法</span></span><br><span class="line"><span class="function">LinkList <span class="title">List_HeadInsert</span><span class="params">(LinkList &amp;List)</span> </span>&#123;</span><br><span class="line">    LNode *s;</span><br><span class="line">    ElemType x;</span><br><span class="line">    List = <span class="keyword">new</span> LNode;</span><br><span class="line">    List -&gt; next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (std::cin &gt;&gt; x &amp;&amp; x != <span class="number">9999</span>) &#123;</span><br><span class="line">        s = <span class="keyword">new</span> LNode;</span><br><span class="line">        s -&gt; data = x;</span><br><span class="line">        s -&gt; next = List -&gt; next;</span><br><span class="line">        List -&gt; next = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> List;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//尾插法</span></span><br><span class="line"><span class="function">LinkList <span class="title">List_TailInsert</span><span class="params">(LinkList &amp;List)</span> </span>&#123;</span><br><span class="line">    LNode *s, *r = List;</span><br><span class="line">    ElemType x;</span><br><span class="line">    List = <span class="keyword">new</span> LNode;</span><br><span class="line">    List -&gt; next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (std::cin &gt;&gt; x &amp;&amp; x != <span class="number">9999</span>) &#123;</span><br><span class="line">        s = <span class="keyword">new</span> LNode;</span><br><span class="line">        s -&gt; data = x;</span><br><span class="line">        r -&gt; next = s;</span><br><span class="line">        r = s;</span><br><span class="line">    &#125;</span><br><span class="line">    r -&gt; next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> List;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//销毁表</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DestroyList</span><span class="params">(LinkList &amp;List)</span> </span>&#123;</span><br><span class="line">    LNode *q, *p = List -&gt; next;</span><br><span class="line">    <span class="keyword">while</span> (p) &#123;</span><br><span class="line">        q = p -&gt; next;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">        p = q;</span><br><span class="line">    &#125;</span><br><span class="line">    List -&gt; next = <span class="literal">NULL</span>; <span class="comment">//置为空表</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="静态链表">静态链表</h4>
<p>在早期的编程语言中没有指针、引用等机制，只能使用<strong>数组</strong>来代替指针，这样的链表内存固定，地址连续，称为静态链表。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义静态链表</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Maxsize N </span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SLinkList</span> &#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="type">int</span> next; <span class="comment">//下一个元素下标</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">SLinkList</span> SLinkList[Maxsize];</span><br></pre></td></tr></table></figure>
<h4 id="双向链表">双向链表</h4>
<p>每个结点除了存有数据和指向下一个结点的指针 next 外，还存有指向上一个结点的指针 prior。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义双向链表</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DNode</span> &#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">DNode</span> *next, *prior;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">DNode</span> DNode, *DLinkList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入（*p 后插入 *s）</span></span><br><span class="line">&#123;</span><br><span class="line">    s -&gt; next = p -&gt; next;</span><br><span class="line">    p -&gt; next -&gt; prior = s;</span><br><span class="line">    s -&gt; prior = p;</span><br><span class="line">    p -&gt; next = s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除（删除 *p 后的 *q）</span></span><br><span class="line">&#123;</span><br><span class="line">    p -&gt; next = q -&gt; next;</span><br><span class="line">    p -&gt; next -&gt; prior = p;</span><br><span class="line">    <span class="keyword">delete</span> q;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="循环链表">循环链表</h4>
<p>一种特殊的链表，即末尾结点 *r 的 next 指针指向头结点 <code>r -&gt; next = L</code>，好处是可以快速的找到尾结点而不用遍历表，如果是循环双链表还需要 <code>L -&gt; prior = r</code>.</p>
<h3 id="顺序表和链表的比较">顺序表和链表的比较</h3>
<ol type="1">
<li>顺序表随机存取/读写，链表只能顺序存取/读写。<br />
</li>
<li>顺序表逻辑相邻的元素存储位置也相邻。<br />
</li>
<li>链表分配内存空间灵活高效。<br />
</li>
<li>链表的插入和删除更高效。<br />
</li>
<li>顺序表插入和删除需要移动大量的元素。</li>
</ol>
<h2 id="栈队列和数组">栈、队列和数组</h2>
<p>栈和队列都是特殊的线性表，对数据的插入删除操作有特殊的规定，导致数据的进出策略不同。</p>
<h3 id="栈">栈</h3>
<p><strong>栈(Stack)</strong>是只允许在一端进行插入或删除操作的线性表。<br />
允许插入或删除的一端称为<strong>栈顶(Top)</strong>，另一端称为<strong>栈底(Bottom)</strong>，由于只允许一端进行插入或删除，栈的数据进出策略简单概括为<strong>后进先出(last in first out, LIFO)</strong>。</p>
<blockquote>
<p>n 个不同元素进栈，出栈元素有 <span class="math inline">\(\frac{1}{n+1}C_{2n}^{n}\)</span> 种不同排列。</p>
</blockquote>
<h4 id="顺序栈">顺序栈</h4>
<h4 id="链式栈">链式栈</h4>
<h3 id="队列">队列</h3>
<h4 id="顺序队列">顺序队列</h4>
<h4 id="链式队列">链式队列</h4>
<h3 id="栈和队列的应用">栈和队列的应用</h3>
<h3 id="特殊矩阵压缩">特殊矩阵压缩</h3>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 博客搭建简单说明</title>
    <url>/2022/03/02/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>本站使用 Hexo 进行搭建，发布在 Github Page 上，Github地址：https://github.com/cohanbb <br />本文为使用 Hexo 和 Github Page 搭建个人博客网站的详细教程。<br />
步骤为：配置 git 和 hexo、配置 github、配置主题、发布文章。</p>
<hr>
<span id="more"></span>
<p><strong>本文索引</strong></p>
<ul>
<li><a href="#hexo-博客搭建简单说明">Hexo 博客搭建简单说明</a>
<ul>
<li><a href="#配置-githexo">配置 git、hexo</a></li>
<li><a href="#github-page-配置">Github Page 配置</a></li>
<li><a href="#配置主题">配置主题</a></li>
<li><a href="#发布博客">发布博客</a></li>
</ul></li>
</ul>
<hr>
<h1 id="hexo-博客搭建简单说明">Hexo 博客搭建简单说明</h1>
<h2 id="配置-githexo">配置 git、hexo</h2>
<ol type="1">
<li><p>安装 <a href="https://nodejs.org/en/">node.js</a>。</p></li>
<li><p>安装 <a href="https://git-scm.com/download/win">git</a>。</p></li>
<li><p>命令行输入命令检验是否安装成功</p></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure>
<ol type="1">
<li><p>安装 hexo<br />
命令行输入 <code>npm install hexo-cli -g</code>，输入 <code>hexo -v</code> 检验是否安装成功。</p></li>
<li><p>初始化 hexo<br />
命令行输入 <code>hexo init [folder]</code>，[folder] 为自定义名字，作为博客的根目录。</p></li>
<li><p>根目录的结构</p>
<ul>
<li>_config.yml : 网站的配置信息，在此配置网站的功能和结构。</li>
<li>package.json: 应用程序的信息，可以查看安装的包。</li>
<li>scaffolds: 模版文件夹，Hexo 根据此来建立文件。</li>
<li>source: 资源文件夹，如 post、tags 等文件存放在此。</li>
<li>themes: 主题 文件夹。Hexo 会根据主题来生成静态页面。</li>
</ul></li>
<li><p>生成静态文件，在根目录下命令行输入 <code>hexo generate</code><br />
启动服务器，输入 <code>hexo server</code><br />
可在 http://localhost:4000/ 查看网站。</p></li>
</ol>
<h2 id="github-page-配置">Github Page 配置</h2>
<ol type="1">
<li><p>登录 <a href="https://github.com">Github</a>，新建 repository，名字必须设为 <strong>username.github.io</strong></p></li>
<li><p>复制仓库的地址 SSH/HTTPs，推荐使用HTTPs，操作简单。</p></li>
<li><p>进入根目录下的 **_config.yml** 文件，在末尾加入：</p></li>
</ol>
<p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span> </span><br><span class="line"> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"> <span class="attr">repo:</span> <span class="string">https://github.com/username/username.github.io.git</span></span><br><span class="line"> <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></p>
<ol start="4" type="1">
<li><p>部署 github<br />
需要下载插件，根目录命令行输入 <code>npm install hexo-deployer-git --save</code><br />
发布网站到Github Page<br />
<code>hexo deploy</code></p></li>
<li><p>然后在浏览器访问 https://username.github.io 即可进入博客主页。</p></li>
</ol>
<h2 id="配置主题">配置主题</h2>
<p>Hexo 博客默认主题为 landscape，若想修改主题，在 github 上找到主题，克隆到 theme 文件夹下。本例为 next 主题。</p>
<p><strong>获取主题</strong><br />
theme文件夹下命令行输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<p>打开 next 的 _config.yml 文件，里面是 next 主题的配置信息，阅读该文档内的注释即可大致明白各部分的作用。 要修改的主要内容为 <code>tags</code>, <code>categories</code>, <code>about</code>, <code>social</code>, <code>avatar</code>, <code>search</code>，网站的背景等。</p>
<p><strong>tags 和 categories</strong><br />
tags 为标签，categories 为类别。在根目录下命令行输入 <code>hexo new page tags</code> ，进入 ./source/tags/index.md，修改为：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">xxxxx</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;tags&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<p>如果想要文章加上标签，只用在文章上加入 <code>tags: xxxx</code> 即可。<br />
categories 与以上同理。</p>
<p><strong>about</strong><br />
在 next/_config.yml 文件中找到 <code>menu</code> ，可在网站中增加 about 。<br />
根目录命令行输入 <code>hexo new page about</code> ，进入 ./source/about/index.md 可编辑 about 的内容。</p>
<p><strong>修改头像，网站的图标、背景</strong></p>
<ul>
<li>修改头像，next/_config.yml 文件中找到 <code>avatar</code> 可配置头像。next/source/image/ 下 avatar.gif 为头像图片，进行更改即可。更改 logo.svg 以及 favicon 图片可以修改网站的图标。</li>
<li>修改背景，在 next/_config.yml 文件查找 <code>custom</code> 可配置 style <code>style: source/_data/styles.styl</code> 后新建 ./source/_data/styles.styl 加入以下代码，后在 next/source/image 中增添背景图片，命名为 background.jpg 即可。</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">body</span> &#123;</span><br><span class="line">   <span class="string">background:url(/images/background.jpg);</span>		<span class="string">//图片路径，默认</span></span><br><span class="line">   <span class="attr">background-repeat:</span> <span class="literal">no</span><span class="string">-repeat;</span>			<span class="string">//图片无法铺满时，是否重复及重复方式</span></span><br><span class="line">   <span class="string">background-attachment:fixed;</span>		<span class="string">//图片是否跟随滚动</span></span><br><span class="line">   <span class="string">background-size:cover;</span>				<span class="string">//覆盖</span></span><br><span class="line">   <span class="string">background-position:center;</span>		<span class="string">//图片显示</span> </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p><strong>启用search</strong><br />
安装插件，根目录下命令行输入 <code>npm install hexo-generator-searchdb --save</code><br />
根目录/_config.yml 文件中加入：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>
<p>next/_config.yml 文件中找到 <code>localsearch</code> 修改为：</p>
<p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line"><span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># if auto, trigger search by changing input</span></span><br><span class="line"><span class="comment"># if manual, trigger search by pressing enter key or search button</span></span><br><span class="line"><span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line"><span class="comment"># show top n results per article, show all results by setting to -1</span></span><br><span class="line"><span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p><strong>插入图片</strong></p>
<p><strong>边栏设置</strong></p>
<p><strong>social link</strong></p>
<h2 id="发布博客">发布博客</h2>
<p>在根目录命令行输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new [pagename]</span><br></pre></td></tr></table></figure>
<p>即可创建新的文章，进入 ./source/_post/ 可找到该文章文件夹，编辑里面的 index.md 即为文章内容。<br />
编辑完成后根目录命令行输入以下命令发布博客。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>如果 markdown 内容中有数学公式，需要在文章上方加入 <code>mathjax: true</code>，或是在 next/_config.yml 文件中找到 <code>mathjax</code>，将 <code>per_page</code> 后改为 <code>true</code>，后者会使所有文章都自动加入 <code>mathjax: true</code>，由于数学公式与 hexo 默认的 marked 渲染器有冲突，故建议卸载 marked 渲染器，使用 pandoc 渲染器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-pandoc --save</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>高等数学_一元函数微分学</title>
    <url>/2022/03/01/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6_%E4%B8%80%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6/</url>
    <content><![CDATA[高等数学<strong>一元函数微分学</strong>的知识总结<br />
内容包括：<br />
1. 导数和微分的概念<br />
2. 各种求导数的方法<br />
3. 导数的应用<br />
4. 微分中值定理及其应用<br />
5. 零点问题与微分不等式<br />

<hr>
<span id="more"></span>
<p><strong>本文索引</strong></p>
<ul>
<li><a href="#导数与微分">导数与微分</a>
<ul>
<li><a href="#导数的定义">导数的定义</a></li>
<li><a href="#导函数">导函数</a></li>
<li><a href="#微分的定义">微分的定义</a></li>
<li><a href="#求导数的方法">求导数的方法</a>
<ul>
<li><a href="#基本公式求导法">基本公式求导法</a></li>
<li><a href="#导数的四则运算法则">导数的四则运算法则</a></li>
<li><a href="#复合函数的求导法">复合函数的求导法</a></li>
<li><a href="#反函数的导数法">反函数的导数法</a></li>
<li><a href="#对数求导法">对数求导法</a></li>
<li><a href="#幂指函数求导法">幂指函数求导法</a></li>
<li><a href="#变限积分求导法">变限积分求导法</a></li>
</ul></li>
<li><a href="#特殊函数的求导">特殊函数的求导</a>
<ul>
<li><a href="#分段函数求导">分段函数求导</a></li>
<li><a href="#隐函数求导">隐函数求导</a></li>
<li><a href="#参数方程求导">参数方程求导</a></li>
<li><a href="#高阶导数">高阶导数</a></li>
</ul></li>
<li><a href="#导数的应用">导数的应用</a>
<ul>
<li><a href="#单调性与极值点">单调性与极值点</a></li>
<li><a href="#凹凸性与拐点">凹凸性与拐点</a></li>
<li><a href="#渐近线">渐近线</a></li>
<li><a href="#求最值或取值范围">求最值或取值范围</a></li>
</ul></li>
</ul></li>
<li><a href="#微分中值定理">微分中值定理</a>
<ul>
<li><a href="#微分中值定理及其推导">微分中值定理及其推导</a>
<ul>
<li><a href="#费马引理">费马引理</a></li>
<li><a href="#罗尔定理">罗尔定理</a></li>
<li><a href="#拉格朗日中值定理">拉格朗日中值定理</a></li>
<li><a href="#柯西中值定理">柯西中值定理</a></li>
<li><a href="#泰勒中值定理">泰勒中值定理</a></li>
<li><a href="#洛必达法则">洛必达法则</a></li>
</ul></li>
<li><a href="#微分中值定理的应用">微分中值定理的应用</a></li>
</ul></li>
<li><a href="#零点问题与微分不等式">零点问题与微分不等式</a></li>
</ul>
<hr>
<h2 id="导数与微分">导数与微分</h2>
<h3 id="导数的定义">导数的定义</h3>
<p>若 <span class="math inline">\(y = f(x)\)</span> 在 <span class="math inline">\(x_0\)</span> 的某一邻域内有定义，当 <span class="math inline">\(x\)</span> 有增量 <span class="math inline">\(\Delta x\)</span> 时相应的 <span class="math inline">\(y\)</span> 有增量 <span class="math inline">\(\Delta y=f(x_0+\Delta x)-f(x_0)\)</span>，当 <span class="math inline">\(\Delta x \to 0\)</span> 时， <span class="math display">\[\lim_{\Delta x \to 0} \frac{\Delta y}{\Delta x} = \lim_{\Delta x \to 0} \frac{f(x_0+\Delta x)-f(x_0)}{\Delta x}.\]</span> 若该极限存在，则<strong>极限值</strong>称为 <span class="math inline">\(y = f(x)\)</span> 在 <span class="math inline">\(x_0\)</span> 处的导数并说该函数在 <span class="math inline">\(x_0\)</span> 处可导，导数记为 <span class="math inline">\(f’(x_0)\)</span>， <span class="math display">\[f’(x_0) = \lim_{\Delta x \to 0} \frac{\Delta y}{\Delta x} = \lim_{\Delta x \to 0} \frac{f(x_0+\Delta x)-f(x_0)}{\Delta x} = \lim_{x \to x_0} \frac{f(x)-f(x_0)}{x-x_0}.\]</span> <strong>注意：</strong></p>
<ul>
<li><p>导数的本质是一种<strong>极限</strong>，存在的充要条件是左右极限都存在且相等。</p>
<blockquote>
<p>当 <span class="math inline">\(\Delta x \to 0^{-}\)</span> 时，<span class="math inline">\(\lim \frac{\Delta y}{\Delta x}\)</span> 为左导数 <span class="math inline">\(f_{-}’(x_0)\)</span>，反之为右导数 <span class="math inline">\(f_{+}’(x_0)\)</span>.</p>
</blockquote></li>
<li><p>导数的几何意义为函数所表示的曲线上某一点的切线斜率。</p></li>
<li><p>函数在某处可导，则必然在此处连续。<strong>反之未必</strong>。</p>
<blockquote>
<p><strong>证</strong><br />
设 <span class="math inline">\(y=f(x)\)</span> 在 <span class="math inline">\(x_0\)</span> 处的导数为 A，则<br />
<span class="math inline">\(\lim_{\Delta x \to 0} \frac{f(x_0+\Delta x)-f(x_0)}{\Delta x} = A\)</span>，<br />
当 <span class="math inline">\(\Delta x \to 0\)</span> 时，<br />
<span class="math inline">\(\Delta y = f(x_0+\Delta x)-f(x_0) = A\Delta x+o(|\Delta x |)\)</span>，<br />
显然 <span class="math inline">\(\Delta y \to 0\)</span>，即函数在 <span class="math inline">\(x_0\)</span> 处连续。<br />
反之不成立的例子：<span class="math inline">\(y = |x|\)</span>，<span class="math inline">\(y = x\sin(x)\)</span>.</p>
</blockquote></li>
</ul>
<h3 id="导函数">导函数</h3>
<p><span class="math inline">\(y = f(x)\)</span>，<span class="math inline">\(x\in D\)</span>，<span class="math inline">\(f’(x_0)\)</span> 为函数在 <span class="math inline">\(x_0\)</span> 处的导数，则 <span class="math inline">\(y = f’(x)\)</span>，<span class="math inline">\(x \in D\)</span> 为该函数的导函数。</p>
<ul>
<li>达布定理：<br />
若 <span class="math inline">\(y=f(x)\)</span> 在 <span class="math inline">\([a,b]\)</span> <strong>可导</strong>（无需导函数连续）， <span class="math inline">\(f’(a) \ne f’(b)\)</span>，则 <span class="math inline">\(\forall \mu\)</span> 位于 <span class="math inline">\(f’(a)\)</span> 和 <span class="math inline">\(f’(b)\)</span> 之间，都 <span class="math inline">\(\exists \xi \in [a,b]\)</span>，使得 <span class="math inline">\(f’(\xi)=\mu\)</span>.</li>
<li>导函数无第一类间断点，若 <span class="math inline">\(y=f(x)\)</span> 可导，则 <span class="math inline">\(f’(x)\)</span> <strong>连续或存在振荡间断点</strong>。</li>
</ul>
<h3 id="微分的定义">微分的定义</h3>
<p><span class="math inline">\(y’|x=x_0=f’(x_0)\)</span></p>
<h3 id="求导数的方法">求导数的方法</h3>
<h4 id="基本公式求导法">基本公式求导法</h4>
<h4 id="导数的四则运算法则">导数的四则运算法则</h4>
<h4 id="复合函数的求导法">复合函数的求导法</h4>
<h4 id="反函数的导数法">反函数的导数法</h4>
<h4 id="对数求导法">对数求导法</h4>
<h4 id="幂指函数求导法">幂指函数求导法</h4>
<h4 id="变限积分求导法">变限积分求导法</h4>
<h3 id="特殊函数的求导">特殊函数的求导</h3>
<h4 id="分段函数求导">分段函数求导</h4>
<h4 id="隐函数求导">隐函数求导</h4>
<h4 id="参数方程求导">参数方程求导</h4>
<h4 id="高阶导数">高阶导数</h4>
<h3 id="导数的应用">导数的应用</h3>
<h4 id="单调性与极值点">单调性与极值点</h4>
<h4 id="凹凸性与拐点">凹凸性与拐点</h4>
<h4 id="渐近线">渐近线</h4>
<h4 id="求最值或取值范围">求最值或取值范围</h4>
<h2 id="微分中值定理">微分中值定理</h2>
<h3 id="微分中值定理及其推导">微分中值定理及其推导</h3>
<h4 id="费马引理">费马引理</h4>
<p><span class="math inline">\(y=f(x)\)</span> 在某领域 <span class="math inline">\(\text{U}(\xi)\)</span> 有定义且在 <span class="math inline">\(\xi\)</span> 处可导，若 <span class="math inline">\(\forall x \in \text{U}(\xi)\)</span>，都有 <span class="math display">\[f(x) \ge f(\xi)(\text{或} f(x) \le f(\xi))，\]</span> 则 <span class="math inline">\(f’(\xi)=0\)</span>.<br />
即若 <span class="math inline">\(x_0\)</span> 为 <span class="math inline">\(f(x)\)</span> 的一个极值点，且 <span class="math inline">\(f’(x_0)\)</span> 存在，则 <span class="math inline">\(f’(x_0)=0\)</span>.</p>
<blockquote>
<p><strong>证</strong><br />
不妨设 <span class="math inline">\(x_0\)</span> 为 <span class="math inline">\(f(x)\)</span> 的一个极大值点，则 <span class="math inline">\(\forall x \in \text{U}(x_0)\)</span>，都有 <span class="math inline">\(\Delta y=f(x)-f(x_0) \le 0\)</span>，则<br />
<span class="math inline">\(f_-’(x_0)=\lim_{x \to x_0^-} \frac{f(x)-f(x_0)}{x-x_0} \ge 0\)</span>，<br />
<span class="math inline">\(f_+’(x_0)=\lim_{x \to x_0^+} \frac{f(x)-f(x_0)}{x-x_0} \le 0\)</span>，<br /> 又 <span class="math inline">\(f’(x_0)\)</span> 存在，故 <span class="math inline">\(f_-’(x_0)=f_+’(x_0)=0\)</span>.</p>
</blockquote>
<p><strong>推论</strong><br />
若 <span class="math inline">\(x=a\)</span> 为 <span class="math inline">\(f(x)\)</span> 的一个极值点，则 <span class="math inline">\(f’(a)=0\)</span> 或不存在。</p>
<h4 id="罗尔定理">罗尔定理</h4>
<p>若 <span class="math inline">\(y=f(x)\)</span> 满足 1. 在 <span class="math inline">\([a,b]\)</span> 上连续 2. 在 <span class="math inline">\((a,b)\)</span> 上可导 3. <span class="math inline">\(f(a)=f(b)\)</span></p>
<p>则 <span class="math display">\[\exists \xi \in (a,b)，\text{使得}f’(\xi)=0.\]</span></p>
<blockquote>
<p><strong>证</strong><br />
<span class="math inline">\(y=f(x)\)</span> 在 <span class="math inline">\([a,b]\)</span> 连续，由最大值最小值定理可知 <span class="math inline">\(f(x)\)</span> 在 <span class="math inline">\([a,b]\)</span> 内存在最大值最小值，<br />
设 M 为最大值，m 为最小值<br />
若 M = m，</p>
<blockquote>
<p>即 <span class="math inline">\(f(x)\)</span> 为常函数，则 <span class="math inline">\(f’(x)=0\)</span>.</p>
</blockquote>
<p>若 m &lt; M，</p>
<blockquote>
<p>因为 <span class="math inline">\(f(a)=f(b)\)</span>，<br />
故 m、M 至少有一点在 <span class="math inline">\((a,b)\)</span> 内取得，<br />
不妨设 <span class="math inline">\(\xi \in (a,b)\)</span>，使得 <span class="math inline">\(f(\xi)=M\)</span>，<br />
由费马引理，<span class="math inline">\(f’(\xi)=0\)</span>.</p>
</blockquote>
<p>得证。</p>
</blockquote>
<p><strong>推论</strong></p>
<h4 id="拉格朗日中值定理">拉格朗日中值定理</h4>
<p>若 <span class="math inline">\(y=f(x)\)</span> 满足 1. 在 <span class="math inline">\([a,b]\)</span> 上连续 2. 在 <span class="math inline">\((a,b)\)</span> 上可导</p>
<p>则 <span class="math inline">\(\exists \xi \in (a,b)\)</span>，使得 <span class="math display">\[f(b)-f(a)=f’(\xi)(b-a)，\]</span> 或写成 <span class="math display">\[f’(\xi)= \frac{f(b)-f(a)}{b-a}.\]</span></p>
<blockquote>
<p><strong>证</strong></p>
</blockquote>
<h4 id="柯西中值定理">柯西中值定理</h4>
<p>若函数 <span class="math inline">\(f(x)\)</span> 和 <span class="math inline">\(g(x)\)</span> 满足 1. 在 <span class="math inline">\([a,b]\)</span> 上连续<br />
2. 在 <span class="math inline">\((a,b)\)</span> 上可导 3. <span class="math inline">\(g’(x) \ne 0\)</span></p>
<p>则 <span class="math inline">\(\exists \xi \in (a,b)\)</span>，使得 <span class="math display">\[\frac{f(b)-f(a)}{g(b)-g(a)}=\frac{f’(\xi)}{g’(\xi)}.\]</span></p>
<blockquote>
<p><strong>证</strong></p>
</blockquote>
<h4 id="泰勒中值定理">泰勒中值定理</h4>
<p>若 <span class="math inline">\(y=f(x)\)</span> 在 <span class="math inline">\(x_0\)</span> 处可导，当 <span class="math inline">\(x \to x_0\)</span> 时 <span class="math display">\[f(x)-f(x_0)=f’(x_0)(x-x_0)+o(x-x_0)，\]</span> 即 <span class="math display">\[f(x)=f(x_0)+f’(x_0)(x-x_0)+o(x-x_0).\]</span> 更加一般的，若 <span class="math inline">\(f(x)\)</span> 在 <span class="math inline">\((a,b)\)</span> 上具有 n+1 阶导数，<span class="math inline">\(x_0 \in (a,b)\)</span>，则 <span class="math display">\[\begin{aligned}
&amp;f(x) = f(x_0)+f’(x_0)(x-x_0)+\frac{f’’(x_0)(x-x_0)^2}{2!}+…\\
&amp;+\frac{f^{(n)}(x_0)(x-x_0)^n}{n!}+\frac{f^{(n+1)}(\xi)(x-x_0)^{n+1}}{(n+1)!}(\text{拉格朗日余项}).
\end{aligned}\]</span> 其中 <span class="math inline">\(\xi\)</span> 位于 <span class="math inline">\(x\)</span> 与 <span class="math inline">\(x_0\)</span> 之间。<br />
另一种写法为，若 <span class="math inline">\(f(x)\)</span> 在 <span class="math inline">\(x_0\)</span> 处 n 阶导数存在，则存在一领域 <span class="math inline">\(\text{U}(x_0)\)</span>，对于 <span class="math inline">\(\forall x \in \text{U}(x_0)\)</span>，有 <span class="math display">\[\begin{aligned}
&amp;f(x) = f(x_0)+f’(x_0)(x-x_0)+\frac{f’’(x_0)(x-x_0)^2}{2!}+…\\
&amp;+\frac{f^{(n)}(x_0)(x-x_0)^n}{n!}+o((x-x_0)^n)(\text{佩亚诺余项}).
\end{aligned}\]</span> 当 <span class="math inline">\(x_0=0\)</span> 时，泰勒公式称为<strong>麦克劳林公式</strong>，几个重要麦克劳林公式 <span class="math display">\[
\begin{aligned}
&amp;(1)  \mathrm{e}^{x}=1+x+\frac{1}{2 !} x^{2}+\cdots+\frac{1}{n !} x^{n}+o\left(x^{n}\right) .\\
&amp;(2)  \sin x=x-\frac{x^{3}}{3 !}+\cdots+(-1)^{n} \frac{x^{2 n+1}}{(2 n+1) !}+o\left(x^{2 n+1}\right) .\\
&amp;(3)  \cos x=1-\frac{x^{2}}{2 !}+\frac{x^{4}}{4 !}-\cdots+(-1)^{n} \frac{x^{2 n}}{(2 n) !}+o\left(x^{2 n}\right) .\\
&amp;(4)  \frac{1}{1-x}=1+x+x^{2}+\cdots+x^{n}+o\left(x^{n}\right) .\\
&amp;(5)  \frac{1}{1+x}=1-x+x^{2}-\cdots+(-1)^{n} x^{n}+o\left(x^{n}\right) .\\
&amp;(6)  \ln (1+x)=x-\frac{x^{2}}{2}+\frac{x^{3}}{3}-\cdots+(-1)^{n-1} \frac{x^{n}}{n}+o\left(x^{n}\right) .\\
&amp;(7)  (1+x)^{\alpha}=1+\alpha x+\frac{\alpha(\alpha-1)}{2 !} x^{2}+\cdots+\frac{\alpha(\alpha-1) \cdots(\alpha-n+1)}{n !} x^{n}+o\left(x^{n}\right) .
\end{aligned}\]</span></p>
<h4 id="洛必达法则">洛必达法则</h4>
<p>若函数 <span class="math inline">\(f(x)\)</span> 和 <span class="math inline">\(g(x)\)</span> 满足 1. <span class="math inline">\(x \to a\)</span>，<span class="math inline">\(\lim f(x)=0(\text{或}\infty)\)</span>，<span class="math inline">\(\lim g(x)=0(\text{或}\infty)\)</span> 2. <span class="math inline">\(x \in \mathring{U}(a)\)</span>，<span class="math inline">\(f’(x)\)</span> 和 <span class="math inline">\(g’(x)\)</span> 都存在，<span class="math inline">\(g’(x) \ne 0\)</span> 3. <span class="math inline">\(x \to a\)</span>，<span class="math inline">\(\lim \frac{f’(x)}{g’(x)}=A(A\text{为实数或}\infty)\)</span></p>
<p>则 <span class="math display">\[\lim_{x \to a}\frac{f(x)}{g(x)}=\lim_{x \to a}\frac{f’(x)}{g’(x)}=A.\]</span> 对于 <span class="math inline">\(\frac{0}{0}/\frac{\infty}{\infty}/0 \cdot \infty/\infty-\infty/1^\infty/0^0/\infty^0\)</span> 这七种情况均可使用洛必达法则求极限。</p>
<h3 id="微分中值定理的应用">微分中值定理的应用</h3>
<h2 id="零点问题与微分不等式">零点问题与微分不等式</h2>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>高等数学</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构_绪论</title>
    <url>/2022/03/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_%E7%BB%AA%E8%AE%BA/</url>
    <content><![CDATA[<p>数据结构与算法的入门概念</p>
<hr>
<span id="more"></span>
<p><strong>本文索引</strong></p>
<ul>
<li><a href="#数据结构-绪论">数据结构-绪论</a>
<ul>
<li><a href="#数据结构">数据结构</a>
<ul>
<li><a href="#基本概念">基本概念</a></li>
<li><a href="#逻辑结构数据元素之间的相互关系">逻辑结构：数据元素之间的相互关系。</a></li>
<li><a href="#数据运算">数据运算</a></li>
<li><a href="#数据的物理结构">数据的物理结构</a></li>
<li><a href="#抽象数据类型">抽象数据类型</a></li>
</ul></li>
<li><a href="#算法">算法</a></li>
<li><a href="#算法效率的度量">算法效率的度量</a>
<ul>
<li><a href="#算法的时间复杂度">算法的时间复杂度</a></li>
<li><a href="#算法的空间复杂度">算法的空间复杂度</a></li>
</ul></li>
</ul></li>
</ul>
<hr>
<h1 id="数据结构-绪论">数据结构-绪论</h1>
<h2 id="数据结构">数据结构</h2>
<h3 id="基本概念">基本概念</h3>
<p>数据：描述客观事物的符号，计算机的可操作对象，是一个整体的概念。<br />
<strong>数据元素</strong>：组成数据的基本单位，如数组的一项。<br />
数据对象：相同性质的数据元素的集合，是数据的子集合。<br />
数据项：数据不可分割的最小单位。<br />
<strong>数据结构(data structure)</strong>：相互之间存在一种或多种特定关系的数据元素的集合。<br />
四者关系可以如此表示：<br />
<img src="1.png"/></p>
<h3 id="逻辑结构数据元素之间的相互关系">逻辑结构：数据元素之间的相互关系。</h3>
<p><strong>集合结构</strong><br />
数据元素除了同属一个集合外没有其他关系。<br />
<strong>线性结构</strong><br />
数据元素是一对一关系，除第一个元素外均有唯一前驱，除最后一个元素外均有唯一后继。<br />
<strong>树形结构</strong><br />
数据元素是一对多关系，有唯一的前驱和多个后继。<br />
<strong>图装结构</strong><br />
数据元素是多对多关系。</p>
<h3 id="数据运算">数据运算</h3>
<p>数据的查找、插入和删除等操作。</p>
<h3 id="数据的物理结构">数据的物理结构</h3>
<p>数据的存储结构影响着数据运算的效率和可行性。</p>
<blockquote>
<p>此部分知识在<a href="操作系统_文件管理.md">操作系统_文件管理</a>章节有详细说明。</p>
</blockquote>
<p>顺序存储：数据元素存放在连续的存储单元中。<br />
非顺序存储：链式存储、索引存储、散列存储。</p>
<h3 id="抽象数据类型">抽象数据类型</h3>
<p>抽象数据类型(abstract data type, ADT)是数学的抽象、对实现原理的抽象，即使用者只关心数据对象和相关的操作 <strong>“是什么”</strong>，而不关心 <strong>“如何实现”</strong>。<br />
如 C语言中的结构体(struct)、C++/Java/Python 中的类(class)等。<br />
换言之，对于一门计算机语言来说，只要不是基本数据类型，即为抽象数据类型。<br />
拓展：同样采取抽象思想的还有应用程序接口(application programming interface, API).</p>
<h2 id="算法">算法</h2>
<p>算法(algorithm)是处理问题的方法、步骤，不仅涉及计算机科学，在计算机中是由程序实现，如函数、方法、类或是整个程序框架。</p>
<p>算法的特性：有穷性、可行性、确定性。</p>
<p>算法设计的要求：正确性、可读性、健壮性、时间效率高和存储量低。</p>
<h2 id="算法效率的度量">算法效率的度量</h2>
<h3 id="算法的时间复杂度">算法的时间复杂度</h3>
<p>算法的时间复杂度即事先预估算法的时间开销与问题规模 n 的关系。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>; <span class="comment">//1</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= n) &#123; <span class="comment">//n+1</span></span><br><span class="line">        i++; <span class="comment">//n</span></span><br><span class="line">        std::cout &lt;&lt; “Hello”; <span class="comment">//n</span></span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; “World\n”; <span class="comment">//1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述程序的时间复杂度为 T(n) = 3n+3.</p>
<p><strong>大O表示法</strong><br />
上限表示法，即算法在最坏的情况下的时间复杂度。 <span class="math display">\[
T(n)=O(f(n)) \Leftrightarrow \lim_{n \to \infty} \frac{T(n)}{f(n)}=c(c\text{为常数}).
\]</span> 故上述算法的时间复杂度为 T(n) = O(n).<br />
常见算法的时间复杂度（从小到达排列）: <span class="math display">\[
O(1)&lt;O(log_2n)&lt;O(n)&lt;O(n^2)&lt;O(n^3)&lt;O(2^n)&lt;O(n!)&lt;O(n^n).
\]</span> 算法的时间复杂度相加，只保留最高阶的项。 <span class="math display">\[
T(n)=T_1(n)+T_2(n)=O(f(n))+O(g(n))=O(max(f(n),g(n)))
\]</span></p>
<h3 id="算法的空间复杂度">算法的空间复杂度</h3>
<p>程序的指令和数据存储在内存中，算法的空间复杂度即为程序占内存的大小与问题规模 n 的关系。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> array[n]; <span class="comment">//n Byte</span></span><br><span class="line">    <span class="type">int</span> i; <span class="comment">//4 Byte</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上代码的空间复杂度为 S(n) = n+1，同样使用大O表示法，则 S(n) = O(n). 递归函数调用的内存开销：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i, j; <span class="comment">//8 Byte</span></span><br><span class="line">    <span class="built_in">func</span>(n<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">//函数递归调用 n 次</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该函数递归调用 n 次，每次在内存中增加两个 int 型变量，故 S(n) = O(n). 若将程序改为：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> array[n]; <span class="comment">//n Byte</span></span><br><span class="line">    <span class="built_in">func</span>(n<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">//函数递归调用 n 次</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>则函数每次调用需在内存中增加一个 int 型数组，从 n 到 1 数组的长度分别为 n,n-1,…,1，则总的长度为 <span class="math inline">\(\frac{1}{2}(n^2+n)\)</span>，故 S(n) = O(n<sup>2</sup>).</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>高等数学_连续函数的十大定理</title>
    <url>/2022/03/11/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6_%E8%BF%9E%E7%BB%AD%E5%87%BD%E6%95%B0%E5%8D%81%E5%A4%A7%E5%AE%9A%E7%90%86/</url>
    <content><![CDATA[连续函数的十大定理：<br />
有界性与最值定理、介值定理、零点定理、费马引理、罗尔定理、拉格朗日中值定理、柯西中值定理、泰勒中值定理、洛必达法则、积分中值定理。
<hr>
<span id="more"></span>
<p><strong>本文索引</strong></p>
<ul>
<li><a href="#连续函数十大定理">连续函数十大定理</a>
<ul>
<li><a href="#有界性与最值定理">有界性与最值定理</a></li>
<li><a href="#介值定理">介值定理</a></li>
<li><a href="#零点定理">零点定理</a></li>
<li><a href="#费马引理">费马引理</a></li>
<li><a href="#罗尔定理">罗尔定理</a></li>
<li><a href="#拉格朗日中值定理">拉格朗日中值定理</a></li>
<li><a href="#柯西中值定理">柯西中值定理</a></li>
<li><a href="#洛必达法则">洛必达法则</a></li>
<li><a href="#泰勒中值定理">泰勒中值定理</a></li>
<li><a href="#积分中值定理">积分中值定理</a></li>
</ul></li>
</ul>
<hr>
<h1 id="连续函数十大定理">连续函数十大定理</h1>
<h2 id="有界性与最值定理">有界性与最值定理</h2>
<p><span class="math inline">\(f(x)\)</span> 在闭区间 [a,b] 上连续，则一定有界，且存在最大值和最小值。</p>
<h2 id="介值定理">介值定理</h2>
<p><span class="math inline">\(f(x)\)</span> 在闭区间 [a,b] 上连续，则 <span class="math display">\[\forall \mu \in (min(f(a),f(b)),max(f(a),f(b))，\exists \xi \in [a,b]，\text{使得} f(\xi) = \mu.\]</span></p>
<p><strong>推论：平均值定理</strong><br />
<span class="math inline">\(f(x)\)</span> 在闭区间 [a,b] 上连续，<span class="math inline">\(a&lt;x_1&lt;x_2&lt;…&lt;x_n\)</span>，则 <span class="math inline">\(\exists \xi \in [x_1, x_n]\)</span>，使得 <span class="math display">\[f(\xi) = \frac {f(x_1)+f(x_2)+…+f(x_n)}{n}.\]</span></p>
<h2 id="零点定理">零点定理</h2>
<p><span class="math inline">\(f(x)\)</span> 在闭区间 [a,b] 上连续，<span class="math inline">\(f(a) \cdot f(b)&lt;0\)</span>，则 <span class="math display">\[\exists \xi \in (a,b)，\text{使得} f(\xi) = 0.\]</span></p>
<h2 id="费马引理">费马引理</h2>
<p><span class="math inline">\(f(x)\)</span> 在某领域 <span class="math inline">\(U(\xi)\)</span> 有定义且在 <span class="math inline">\(\xi\)</span> 处可导，若 <span class="math inline">\(\forall x \in U(\xi)\)</span>，都有 <span class="math display">\[f(x) \ge f(\xi)(\text{或} f(x) \le f(\xi))，\]</span> 则 <span class="math inline">\(f’(\xi)=0\)</span>.</p>
<blockquote>
<p><strong>证</strong></p>
</blockquote>
<h2 id="罗尔定理">罗尔定理</h2>
<p><span class="math inline">\(f(x)\)</span> 满足 1. 在 [a,b] 上连续 2. 在 (a,b) 上可导 3. <span class="math inline">\(f(a)=f(b)\)</span></p>
<p>则 <span class="math display">\[\exists \xi \in (a,b)，\text{使得}f’(\xi)=0.\]</span> <strong>推论</strong></p>
<h2 id="拉格朗日中值定理">拉格朗日中值定理</h2>
<p><span class="math inline">\(f(x)\)</span> 满足 1. 在 [a,b] 上连续 2. 在 (a,b) 上可导</p>
<p>则 <span class="math inline">\(\exists \xi \in (a,b)\)</span>，使得 <span class="math display">\[f(b)-f(a)=f’(\xi)(b-a)，\]</span> 或写成 <span class="math display">\[f’(\xi)= \frac{f(b)-f(a)}{b-a}.\]</span></p>
<h2 id="柯西中值定理">柯西中值定理</h2>
<p><span class="math inline">\(f(x)\)</span> 和 <span class="math inline">\(g(x)\)</span> 满足 1. 在 [a,b] 上连续<br />
2. 在 (a,b) 上可导 3. <span class="math inline">\(g’(x) \ne 0\)</span></p>
<p>则 <span class="math inline">\(\exists \xi \in (a,b)\)</span>，使得 <span class="math display">\[\frac{f(b)-f(a)}{g(b)-g(a)}=\frac{f’(\xi)}{g’(\xi)}.\]</span></p>
<h2 id="洛必达法则">洛必达法则</h2>
<p><span class="math inline">\(f(x)\)</span> 和 <span class="math inline">\(g(x)\)</span> 满足 1. <span class="math inline">\(x \to a\)</span>，<span class="math inline">\(\lim f(x)=0(\text{或}\infty)\)</span>，<span class="math inline">\(\lim g(x)=0(\text{或}\infty)\)</span> 2. <span class="math inline">\(x \in \mathring{U}(a)\)</span>，<span class="math inline">\(f’(x)\)</span> 和 <span class="math inline">\(g’(x)\)</span> 都存在，<span class="math inline">\(g’(x) \ne 0\)</span> 3. <span class="math inline">\(x \to a\)</span>，<span class="math inline">\(\lim \frac{f’(x)}{g’(x)}=A(A\text{为实数或}\infty)\)</span></p>
<p>则 <span class="math display">\[\lim_{x \to a}\frac{f(x)}{g(x)}=\lim_{x \to a}\frac{f’(x)}{g’(x)}=A.\]</span> 对于 <span class="math inline">\(\frac{0}{0}/\frac{\infty}{\infty}/0 \cdot \infty/\infty-\infty/1^\infty/0^0/\infty^0\)</span> 七种情况均可使用洛必达法则求极限。</p>
<h2 id="泰勒中值定理">泰勒中值定理</h2>
<p>若 <span class="math inline">\(f(x)\)</span> 在 <span class="math inline">\(x_0\)</span> 处可导，当 <span class="math inline">\(x \to x_0\)</span> 时 <span class="math display">\[f(x)-f(x_0)=f’(x_0)(x-x_0)+o(x-x_0)\]</span> 即 <span class="math display">\[f(x)=f(x_0)+f’(x_0)(x-x_0)+o(x-x_0)\]</span> 更加一般的，若 <span class="math inline">\(f(x)\)</span> 在 (a,b) 上具有 n+1 阶导数，<span class="math inline">\(x_0 \in (a,b)\)</span>，则 <span class="math display">\[f(x) = f(x_0)+f’(x_0)(x-x_0)+\frac{f’’(x_0)(x-x_0)^2}{2!}+…\]</span> <span class="math display">\[+\frac{f^{(n)}(x_0)(x-x_0)^n}{n!}+\frac{f^{(n+1)}(\xi)(x-x_0)^{n+1}}{(n+1)!}(\text{拉格朗日余项}).\]</span> 其中 <span class="math inline">\(\xi\)</span> 位于 <span class="math inline">\(x\)</span> 与 <span class="math inline">\(x_0\)</span> 之间。</p>
<h2 id="积分中值定理">积分中值定理</h2>
<p><span class="math inline">\(f(x)\)</span> 在 [a,b] 上连续，则 <span class="math inline">\(\exists \xi \in [a,b]\)</span>，使得 <span class="math display">\[\int_{a}^{b} f(x)dx = f(\xi)(b-a).\]</span></p>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>高等数学</tag>
      </tags>
  </entry>
  <entry>
    <title>高等数学笔记_函数与极限</title>
    <url>/2022/02/28/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6_%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/</url>
    <content><![CDATA[高等数学<strong>函数与极限</strong>部分的知识总结<br />
内容包括：<br />
1. 数列的极限、求数列极限的方法<br />
2. 函数的极限、求函数极限的方法<br />
3. 函数的连续性和间断点的判断<br />

<hr>
<span id="more"></span>
<p><strong>本文索引</strong></p>
<ul>
<li><a href="#高等数学_函数与极限">高等数学_函数与极限</a>
<ul>
<li><a href="#数列的极限">数列的极限</a>
<ul>
<li><a href="#定义和性质">定义和性质</a>
<ul>
<li><a href="#定义">定义</a></li>
<li><a href="#性质">性质</a></li>
</ul></li>
<li><a href="#求数列极限的方法">求数列极限的方法</a></li>
</ul></li>
<li><a href="#函数">函数</a></li>
<li><a href="#函数的极限">函数的极限</a>
<ul>
<li><a href="#定义和性质-1">定义和性质</a>
<ul>
<li><a href="#定义-1">定义</a></li>
<li><a href="#性质-1">性质</a></li>
</ul></li>
<li><a href="#求函数极限的方法">求函数极限的方法</a>
<ul>
<li><a href="#极限存在准则">极限存在准则</a></li>
<li><a href="#无穷小与无穷大">无穷小与无穷大</a></li>
<li><a href="#无穷的比较">无穷的比较</a></li>
<li><a href="#泰勒公式">泰勒公式</a></li>
<li><a href="#洛必达法则">洛必达法则</a></li>
</ul></li>
</ul></li>
<li><a href="#函数的连续与间断">函数的连续与间断</a>
<ul>
<li><a href="#连续性">连续性</a></li>
<li><a href="#间断点">间断点</a></li>
</ul></li>
<li><a href="#连续函数的性质">连续函数的性质</a>
<ul>
<li><a href="#连续性运算法则">连续性运算法则</a></li>
<li><a href="#闭区间上的连续函数定理">闭区间上的连续函数定理</a>
<ul>
<li><a href="#有界性与最值定理">有界性与最值定理</a></li>
<li><a href="#介值定理">介值定理</a></li>
<li><a href="#零点定理">零点定理</a></li>
</ul></li>
</ul></li>
</ul></li>
</ul>
<hr>
<h1 id="高等数学_函数与极限">高等数学_函数与极限</h1>
<h2 id="数列的极限">数列的极限</h2>
<h3 id="定义和性质">定义和性质</h3>
<h4 id="定义">定义</h4>
<p><span class="math display">\[\lim x_n=a \Leftrightarrow  {\forall\varepsilon&gt;0,\exists N\in \textbf{N}^+,当n&gt;N时,恒有\left |x_n-a  \right |&lt;0. }\]</span> 若数列 {x<sub>n</sub>} 存在极限 a，则称数列 {x<sub>n</sub>} 收敛于 a，否则称数列 {x<sub>n</sub>} 是发散的。</p>
<h4 id="性质">性质</h4>
<ul>
<li><p><strong>定理</strong>：若 {x<sub>n</sub>} 收敛于 a，则其子列也收敛于 a.</p>
<blockquote>
<p>在数列 {x<sub>n</sub>} 中选取无穷多项，按照原来的先后顺序排列成的新数列成为 {x<sub>n</sub>} 的<strong>子列</strong>。</p>
</blockquote></li>
</ul>
<h3 id="求数列极限的方法">求数列极限的方法</h3>
<h2 id="函数">函数</h2>
<h2 id="函数的极限">函数的极限</h2>
<h3 id="定义和性质-1">定义和性质</h3>
<h4 id="定义-1">定义</h4>
<h4 id="性质-1">性质</h4>
<h3 id="求函数极限的方法">求函数极限的方法</h3>
<h4 id="极限存在准则">极限存在准则</h4>
<h4 id="无穷小与无穷大">无穷小与无穷大</h4>
<h4 id="无穷的比较">无穷的比较</h4>
<h4 id="泰勒公式">泰勒公式</h4>
<h4 id="洛必达法则">洛必达法则</h4>
<h2 id="函数的连续与间断">函数的连续与间断</h2>
<h3 id="连续性">连续性</h3>
<h3 id="间断点">间断点</h3>
<h2 id="连续函数的性质">连续函数的性质</h2>
<h3 id="连续性运算法则">连续性运算法则</h3>
<h3 id="闭区间上的连续函数定理">闭区间上的连续函数定理</h3>
<h4 id="有界性与最值定理">有界性与最值定理</h4>
<p><span class="math inline">\(y=f(x)\)</span> 在 <span class="math inline">\([a,b]\)</span> 上连续，则在 <span class="math inline">\([a,b]\)</span> 上一定有界，且存在最大值和最小值。</p>
<h4 id="介值定理">介值定理</h4>
<p><span class="math inline">\(y=f(x)\)</span> 在 <span class="math inline">\([a,b]\)</span> 上连续，则 <span class="math display">\[\forall \mu \in (min(f(a),f(b)),max(f(a),f(b))，\exists \xi \in (a,b)，\text{使得} f(\xi) = \mu.\]</span></p>
<p><strong>推论1</strong><br />
<span class="math inline">\(y=f(x)\)</span> 在 <span class="math inline">\([a,b]\)</span> 上连续，M 和 m 为最大值和最小值，则 <span class="math display">\[\forall m \le \mu \le M\text{，}\exists \xi \in [a,b]\text{，使得} f(\xi)= \mu.\]</span><br />
<strong>推论2 平均值定理</strong><br />
<span class="math inline">\(y=f(x)\)</span> 在 <span class="math inline">\([a,b]\)</span> 上连续，<span class="math inline">\(a&lt;x_1&lt;x_2&lt;…&lt;x_n\)</span>，则 <span class="math inline">\(\exists \xi \in [x_1, x_n]\)</span>，使得 <span class="math display">\[f(\xi) = \frac {f(x_1)+f(x_2)+…+f(x_n)}{n}.\]</span></p>
<h4 id="零点定理">零点定理</h4>
<p><span class="math inline">\(y=f(x)\)</span> 在 <span class="math inline">\([a,b]\)</span> 上连续，<span class="math inline">\(f(a) \cdot f(b)&lt;0\)</span>，则 <span class="math display">\[\exists \xi \in (a,b)，\text{使得} f(\xi) = 0.\]</span></p>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>高等数学</tag>
      </tags>
  </entry>
</search>
