<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git 教程及其远程仓库 GitHub</title>
    <url>/2022/06/09/Git-%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="摘要">摘要</h1>
<p>Git 是一个开源的分布式版本控制系统，是 Linus Torvalds 为 Linux 内核开发的开放源码的版本控制软件。与其他版本控制工具不同，Git 采用了分布式版本库的方式，同时还是一个内容管理系统，为不同设备和用户间的内容同步提供了便利。Git 目前被广泛运用在 GitHub、GitLab 以及中国的 Gitee 等代码托管和版本控制系统。</p>
<hr>
<span id="more"></span>
<p><strong>本文索引</strong></p>
<ul>
<li><a href="#摘要">摘要</a></li>
<li><a href="#git-安装和配置">Git 安装和配置</a>
<ul>
<li><a href="#安装-git">安装 Git</a></li>
<li><a href="#配置-git">配置 Git</a></li>
</ul></li>
<li><a href="#git-原理">Git 原理</a>
<ul>
<li><a href="#git-基本工作流程">Git 基本工作流程</a></li>
<li><a href="#git-工作区暂存区和版本库">Git 工作区、暂存区和版本库</a></li>
<li><a href="#深入理解-git">深入理解 Git</a></li>
</ul></li>
<li><a href="#git-常用命令">Git 常用命令</a>
<ul>
<li><a href="#创建和克隆-git-仓库">创建和克隆 Git 仓库</a></li>
<li><a href="#配置-git-1">配置 Git</a></li>
<li><a href="#提交和修改">提交和修改</a></li>
<li><a href="#分支">分支</a></li>
</ul></li>
<li><a href="#github">GitHub</a></li>
<li><a href="#参考文献">参考文献</a></li>
</ul>
<hr>
<h1 id="git-安装和配置">Git 安装和配置</h1>
<h2 id="安装-git">安装 Git</h2>
<p>Git 有良好的跨平台性，目前支持在 Linux、MacOS、FreeBSD 和 Windows 平台上运行。</p>
<p>Windows 上可进入官网下载 Git：<a href="http://git-scm.com/download/win">git download</a>，若无法下载或下载缓慢可使用国内镜像：<a href="https://mirrors.tuna.tsinghua.edu.cn/github-release/git-for-windows/git/Git%20for%20Windows%202.36.1/">清华大学 git for windows update 镜像</a>，下载并安装成功后将 Git 的 bin 目录加入环境变量。</p>
<p>Linux 上可以直接使用 shell，以 Debian 系为例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ apt-get install git</span><br></pre></td></tr></table></figure>
<p>终端输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git --version</span><br><span class="line">git version 2.32.1</span><br></pre></td></tr></table></figure>
<p>若终端输出 Git 的版本号，则证明安装成功。</p>
<h2 id="配置-git">配置 Git</h2>
<p>配置个人信息，终端输入用户名和邮箱地址：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;your name&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;your email&quot;</span></span><br></pre></td></tr></table></figure>
<h1 id="git-原理">Git 原理</h1>
<h2 id="git-基本工作流程">Git 基本工作流程</h2>
<ol type="1">
<li>克隆 Git 资源到工作区。</li>
<li>在工作区对资源进行修改。</li>
<li>将工作区的资源提交。</li>
<li>若发现提交的内容有问题，可以撤回提交。</li>
</ol>
<h2 id="git-工作区暂存区和版本库">Git 工作区、暂存区和版本库</h2>
<ul>
<li>工作区：本地的资源目录。</li>
<li>暂存区：位于工作区的 .git/index 文件中。</li>
<li>版本库：位于工作区的 .git 目录。</li>
</ul>
<p><img src="ACA7C7AA-A862-4052-A3D8-CCF726A39110.jpeg" /></p>
<ul>
<li>使用 <code>git init</code> 可使用当前目录作为 Git 仓库，该命令会在当前目录生成一个 <strong>.git</strong> 目录作为版本库。</li>
<li>图中左侧为<strong>工作区</strong>，右侧为<strong>版本库</strong> 即 <strong>.git</strong> 目录，在版本库中有 <strong>index</strong> 文件代表<strong>暂存区</strong>。</li>
<li><strong>HEAD</strong> 为游标文件指向最后一次提交的分支，master 文件中存放着对象库中 master 分支的提交信息。</li>
<li><strong>objects</strong> 文件是 Git 的<strong>对象库</strong>，实际位于 .git/objects 目录，里面包含了文件内容、目录树等对象。</li>
<li>当使用 <code>git add</code> 命令时，即工作区增加或修改文件时，index 会生成新的文件信息和目录树，同时工作区增加或修改的文件内容被写入 objects 中的一个新的对象中。</li>
<li>当执行提交操作 <code>git commit</code> 的时候，index 中的目录树写入 objects 中，并生成一个提交信息，master 中写入这个提交信息，其中含有刚刚提交的目录树等信息。</li>
<li>当执行 <code>git reset HEAD</code> 命令时，index 中的目录树会被重写，被 master 中提交信息的目录树所替换，但工作区不受影响。</li>
<li>当执行 <code>git rm --cached &lt;file&gt;</code> 命令时，只从 index 中删除文件，工作区不受改变。</li>
<li>当执行 <code>git checkout .</code> 或者 <code>git checkout -- &lt;file&gt;</code> 命令时，会用 index 中全部或指定的文件替换工作区的文件。这个操作非常危险，会清除工作区中未添加到 index 的改动。</li>
<li>当执行 <code>git checkout HEAD .</code> 或者 <code>git checkout HEAD &lt;file&gt;</code> 命令时，会用 HEAD 指向 master 分支中全部或者部分文件替换 index 以及工作区的文件。这个操作也是极具危险性的，因为不仅会清空工作区中为提交的改动，也会清楚暂存区中未提交的改动。</li>
</ul>
<h2 id="深入理解-git">深入理解 Git</h2>
<p>下面以实际的操作来更深刻地理解 Git：</p>
<ol type="1">
<li>首先生成一个目录 test 作为工作区，并初始化 git：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> <span class="built_in">test</span> </span><br><span class="line">$ <span class="built_in">cd</span> <span class="built_in">test</span></span><br><span class="line">$ git init</span><br></pre></td></tr></table></figure>
<ol start="2" type="1">
<li>可查看到初始化后的工作区有一个隐藏目录 .git，查看该目录的内容：</li>
</ol>
<p><img src="2022-05-30-22-48-10.png" /></p>
<p>查看 .git/config 文件，并配置身份信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> .git/config</span><br><span class="line">[core]</span><br><span class="line">    repositoryformatversion = 0</span><br><span class="line">    filemode = <span class="literal">true</span></span><br><span class="line">    bare = <span class="literal">false</span></span><br><span class="line">    logallrefupdates = <span class="literal">true</span></span><br><span class="line">$ git config user.name <span class="string">&quot;Cohanbb&quot;</span></span><br><span class="line">$ git config user.email <span class="string">&quot;cohanbb777@163.com&quot;</span></span><br><span class="line">$ <span class="built_in">cat</span> .git/config</span><br><span class="line">[core]</span><br><span class="line">    repositoryformatversion = 0</span><br><span class="line">    filemode = <span class="literal">true</span></span><br><span class="line">    bare = <span class="literal">false</span></span><br><span class="line">    logallrefupdates = <span class="literal">true</span></span><br><span class="line">[user]</span><br><span class="line">    name = Cohanbb</span><br><span class="line">    email = cohanbb777@163.com</span><br></pre></td></tr></table></figure>
<ol start="3" type="1">
<li>新建一个文件 1.txt 添加内容『helloworld』，并使用 <code>git add 1.txt</code>，之后再次查看 .git 目录的内容：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">touch</span> 1.txt</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;helloworld&quot;</span> &gt; 1.txt</span><br><span class="line">$ <span class="built_in">cat</span> 1.txt</span><br><span class="line">helloworld</span><br><span class="line">$ git add 1.txt</span><br><span class="line"><span class="comment">#再次查看 .git 目录内容</span></span><br><span class="line">$ <span class="built_in">ls</span> -R .git</span><br></pre></td></tr></table></figure>
<p><img src="2022-05-30-23-08-01.png" /></p>
<p>发现与之前相比多了两个文件：</p>
<ul>
<li>index 文件</li>
<li>objects/31 目录以及目录下的文件 e0fce560e96c8b357f5b8630c7d8fbeb0a3ec8</li>
</ul>
<p>index 文件是暂存区，无法直接查看，objects/31 是新生成的对象，e0fce560e96c8b357f5b8630c7d8fbeb0a3ec8 是以哈希为名的文件，使用 <code>git cat-file -p</code> 可以读取该文件的内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git cat-file -p 31e0fce560e96c8b357f5b8630c7d8fbeb0a3ec8</span><br><span class="line">helloworld</span><br></pre></td></tr></table></figure>
<ol start="4" type="1">
<li>在工作区新建文件文件 2.txt 添加内容『1234』，并使用 <code>git add 2.txt</code>，再次查看 .git 目录的内容：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">touch</span> 2.txt</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;1234&quot;</span> &gt; 2.txt</span><br><span class="line">$ git add 2.txt</span><br><span class="line">$ <span class="built_in">ls</span> -R .git</span><br></pre></td></tr></table></figure>
<p><img src="16540518361014.jpg" /></p>
<p>发现 object 目录下生成了一个新的对象 81，使用 <code>git cat-file -p 81c545efebe5f57d4cab2ba9ec294c4b0cadf672</code> 进行读取得到 1234。</p>
<ol start="5" type="1">
<li>修改 1.txt 文件的内容，修改为 『1234』，并使用 <code>git add 1.txt</code>，再次查看 .git/objects 目录的内容：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;1234&quot;</span> &gt; 1.txt</span><br><span class="line">$ git add 1.txt</span><br><span class="line">$ <span class="built_in">ls</span> -R .git/objects</span><br></pre></td></tr></table></figure>
<p><img src="16540524299481.jpg" /></p>
<p>发现与之前没有任何该改变，故可知 objects 目录里的对象仅仅存储添加/修改的文件内容，与文件的名称无关。</p>
<p>直接查看 index 文件的内容，发现是乱码，但可看到刚刚创建的文件名 1.txt 和 2.txt：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> .git/index</span><br><span class="line">DIRCb���</span><br><span class="line">        ��b���</span><br><span class="line">              ��~3�����E����&#125;L�+��)LK</span><br><span class="line">                                     ��r1.txtb��P<span class="string">&quot;_�b��P&quot;</span>_�~3�����E����&#125;L�+��)LK</span><br><span class="line">                   ��r2.txt0�8��?D.JN��</span><br><span class="line"></span><br><span class="line">                                       u���</span><br></pre></td></tr></table></figure>
<p>实际上 index 文件是虚拟的工作区，但仅仅是一个文件索引，包含了工作区的目录树，目录树上存储了各文件的文件名、文件的最终修改时间、文件的长度、文件的类型以及文件的哈希值。<br />
文件的具体内容并未存储在 index，而是存储在 objects 目录之中。objects 目录中除了 info 和 pack 其他的目录名称都是两个字符构成，这是因为文件的哈希值有 40 位，取前两位作为目录，后 38 位作为目录下的文件名。</p>
<p>在 objects 目录下，存有四种类型的哈希值：blob 型、tree 型、commit 型和 parent 型。</p>
<ul>
<li>blob 型用来存储添加/修改文件的内容</li>
<li>tree 型存储某个目录下的文件信息，包括文件名、文件权限、文件的哈希值</li>
<li>commit 型存储提交的信息</li>
<li>parent 型存储上一次提交产生的 commit</li>
</ul>
<p>到这里仍然觉得一头雾水，再做一个实验来深刻理解他们的运作过程：</p>
<ol type="1">
<li>在刚刚实验的基础上，使用 <code>git commit</code> 命令进行提交，并查看 objects 目录的内容：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git commit -m <span class="string">&#x27;1&#x27;</span></span><br><span class="line">$ <span class="built_in">ls</span> -R .git/objects</span><br></pre></td></tr></table></figure>
<p><img src="16540563672772.jpg" /></p>
<p>与之前向比多了哪些内容呢？多了两个新的对象：95 和 da，读取这两条哈希值的类型和内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git cat-file -t 953ee820</span><br><span class="line">commit <span class="comment">#commit 型</span></span><br><span class="line">$ git cat-file -t dadc6837</span><br><span class="line">tree <span class="comment">#tree 型</span></span><br><span class="line">$ git cat-file -p 953ee820 </span><br><span class="line"><span class="comment">#commit 型的内容</span></span><br><span class="line">tree dadc6837ad6c06f0a9f21eb90a385f88338a97fa</span><br><span class="line">author Cohanbb &lt;cohanbb777@163.com&gt; 1654056297 +0000</span><br><span class="line">committer Cohanbb &lt;cohanbb777@163.com&gt; 1654056297 +0000</span><br><span class="line"></span><br><span class="line">1 </span><br><span class="line">$ git cat-file -p dadc6837</span><br><span class="line"><span class="comment">#tree 型的内容</span></span><br><span class="line">100644 blob 81c545efebe5f57d4cab2ba9ec294c4b0cadf672    1.txt</span><br><span class="line">100644 blob 81c545efebe5f57d4cab2ba9ec294c4b0cadf672    2.txt </span><br></pre></td></tr></table></figure>
<p>可看出 95 对象为 commit 型的哈希值，da 对象为 tree 型的哈希值，commit 里面存储了提交的目录树、作者和提交者的身份信息以及提交的名称。tree 里面存储了提交文件的权限、提交文件的哈希值及其类型、提交的文件名。</p>
<ol start="2" type="1">
<li>创建一个新的文件 3.txt 添加内容『1234』，并使用 <code>git add</code> 以及 <code>git commit</code> 提交：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">touch</span> 3.txt</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;1234&quot;</span> &gt; 3.txt</span><br><span class="line">$ git add 3.txt</span><br><span class="line">$ git commit -m <span class="string">&#x27;2&#x27;</span></span><br></pre></td></tr></table></figure>
<p><img src="16540575293261.jpg" /></p>
<p>发现新增了 0b 和 93 两个新的对象，依然是读取他们的哈希类型和内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git cat-file -t 0b8e2a12</span><br><span class="line">commit</span><br><span class="line">$ git cat-file -t 933c6a92</span><br><span class="line">tree</span><br><span class="line">$ git cat-file -p 0b8e2a12</span><br><span class="line">tree 933c6a92d63f610f450ca5f9fe6003e5b2427a1b</span><br><span class="line">parent 953ee8209f81a27af0bb13d6f8ae8cc1a878056f</span><br><span class="line">author Cohanbb &lt;cohanbb777@163.com&gt; 1654057402 +0000</span><br><span class="line">committer Cohanbb &lt;cohanbb777@163.com&gt; 1654057402 +0000</span><br><span class="line"></span><br><span class="line">2</span><br><span class="line">$ git cat-file -p 933c6a92</span><br><span class="line">100644 blob 81c545efebe5f57d4cab2ba9ec294c4b0cadf672    1.txt</span><br><span class="line">100644 blob 81c545efebe5f57d4cab2ba9ec294c4b0cadf672    2.txt</span><br><span class="line">100644 blob 81c545efebe5f57d4cab2ba9ec294c4b0cadf672    3.txt</span><br></pre></td></tr></table></figure>
<p>发现这次的 commit 与上一次有所不同，即多了一个 parent 项，观察发现这一项是上一次提交产生的 commit。tree 里面存储了三个文件的信息。</p>
<p>此时我们来查看一下 HEAD 的内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> .git/HEAD </span><br><span class="line">ref: refs/heads/master</span><br></pre></td></tr></table></figure>
<p>出现一个文件的路径，查看 refs/heads/master 文件的内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> .git/refs/heads/master</span><br><span class="line">0b8e2a12653a0600b8d0f3bf34d2b32c5218b5d9</span><br><span class="line">$ git cat-file -p 0b8e2a12</span><br><span class="line">tree 933c6a92d63f610f450ca5f9fe6003e5b2427a1b</span><br><span class="line">parent 953ee8209f81a27af0bb13d6f8ae8cc1a878056f</span><br><span class="line">author Cohanbb &lt;cohanbb777@163.com&gt; 1654057402 +0000</span><br><span class="line">committer Cohanbb &lt;cohanbb777@163.com&gt; 1654057402 +0000</span><br><span class="line"></span><br><span class="line">2</span><br></pre></td></tr></table></figure>
<p>发现 master 文件中存储着一个哈希值，正是刚刚提交所生成的 commit。</p>
<p><strong>总结</strong><br />
index 是工作区的一个文件索引，存储着各文件各版本的信息，但是并没有存放文件的具体内容，当执行 <code>git add</code> 操作，文件的具体内容被存放在 objects 中的 blob 对象中，当执行 <code>git commit</code> 操作，index 将目录树存入 objects 并生成了 commit 对象，HEAD 指向最后一次提交的分支，master 中存放刚生成的 commit 对象，包含 tree 对象、作者的身份信息等。</p>
<h1 id="git-常用命令">Git 常用命令</h1>
<h2 id="创建和克隆-git-仓库">创建和克隆 Git 仓库</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init <span class="comment">#初始化仓库</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> &lt;repository&gt; <span class="comment">#克隆仓库到本地</span></span><br><span class="line">git <span class="built_in">clone</span> &lt;repository&gt; &lt;directory&gt; <span class="comment">#克隆仓库到指定目录下</span></span><br></pre></td></tr></table></figure>
<h2 id="配置-git-1">配置 Git</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --list <span class="comment">#列出 git 配置</span></span><br><span class="line">git config -e <span class="comment">#编辑 git 配置</span></span><br><span class="line">git config -e --global <span class="comment">#编辑全局 git 配置 </span></span><br></pre></td></tr></table></figure>
<h2 id="提交和修改">提交和修改</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add &lt;file1&gt; &lt;file2&gt; ... <span class="comment">#添加一个或者多个文件到暂存区</span></span><br><span class="line">git add &lt;<span class="built_in">dir</span>&gt; <span class="comment">#添加指定目录到缓存区</span></span><br><span class="line"></span><br><span class="line">git status <span class="comment">#查看上次提交之后有无对文件进行再次的修改</span></span><br><span class="line"></span><br><span class="line">git diff &lt;file&gt; <span class="comment">#显示缓存区和工作区文件的差异</span></span><br><span class="line">git diff --cached &lt;file&gt; <span class="comment">#显示暂存区和上一次提交的差异</span></span><br><span class="line"></span><br><span class="line">git commit &lt;file1&gt; &lt;file2&gt; ... -m &lt;message&gt; <span class="comment">#提交暂存区的文件到仓库区</span></span><br><span class="line">git commit -a <span class="comment">#不需要 git add 直接提交</span></span><br><span class="line"></span><br><span class="line">git checkout -- &lt;file&gt; <span class="comment">#将文件从暂存区恢复到工作区</span></span><br><span class="line">git checkout HEAD &lt;file&gt; <span class="comment">#将文件从版本库恢复到暂存区和工作区</span></span><br><span class="line"></span><br><span class="line">git reset --mixed &lt;HEAD&gt; <span class="comment">#重置暂存区与上一次提交的保持一致</span></span><br><span class="line">git reset --soft &lt;HEAD&gt; <span class="comment">#退回到某个版本 </span></span><br><span class="line">git reset --hard &lt;HEAD&gt; <span class="comment">#撤销工作区所有未提交的修改内容，将暂存区和工作区都回到上一次的版本，并删除之前的所有信息提交</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">rm</span> -f &lt;file&gt; <span class="comment">#删除暂存区和工作区的文件</span></span><br><span class="line">git <span class="built_in">rm</span> --cached &lt;file&gt; <span class="comment">#仅仅删除暂存区的文件，工作区的文件仍然保留</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">mv</span> &lt;file&gt; &lt;newfile&gt; <span class="comment">#移动或重命名一个文件、目录或软链接</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span> <span class="comment">#查看历史提交记录</span></span><br><span class="line">git blame &lt;file&gt; <span class="comment">#以列表的形式查看指定文件的修改历史</span></span><br><span class="line"></span><br><span class="line">git remote <span class="comment">#操作远程仓库</span></span><br><span class="line">git fetch <span class="comment"># 从远程仓库取代码库</span></span><br><span class="line">git pull <span class="comment">#下载远程代码并合并</span></span><br><span class="line">git push <span class="comment">#上传远程代码并合并</span></span><br></pre></td></tr></table></figure>
<h2 id="分支">分支</h2>
<p>每一种版本控制系统都支持分支，一个分支代表一条独立的开发线，使用分支意味着可以从开发主线上分离开，然后在不影响主线的同时继续工作。</p>
<p>Git 的分支即意味着与 master 分支提交的内容独立，在 master 分支提交的内容不会影响其他分支，在其他分支提交的内容也不会影响 master。</p>
<blockquote>
<p>注意：在任何分支进行提交操作之前，工作区的修改内容在任何分支都可见，一旦有任何分支进行提交操作，则其他分支回到上次提交操作后的状态。</p>
</blockquote>
<p>基本使用方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch <span class="comment"># 列出分支</span></span><br><span class="line">git branch &lt;branchname&gt; <span class="comment">#创建分支</span></span><br><span class="line">git checkout &lt;branchname&gt; <span class="comment">#切换分支</span></span><br><span class="line">git merge &lt;branchname&gt; <span class="comment">#合并分支</span></span><br><span class="line">git branch -d  &lt;branchname&gt; <span class="comment">#删除分支</span></span><br></pre></td></tr></table></figure>
<h1 id="github">GitHub</h1>
<p>GitHub 是基于 Git 的代码托管和版本控制平台，可以在上面创建仓库或项目。</p>
<p>首先需要注册一个 GitHub 账号，然后在本地创建 SSH KEY：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;your email&quot;</span></span><br></pre></td></tr></table></figure>
<p>公钥在 ~/.ssh/id_rsa.pub 中，进入 GitHub 进入 account settings 选择 SSH Keys，Add SSH Key，添加在电脑上生成的公钥。添加后使用下面的命令验证是否成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p>会弹出警告，输入 yes 就行了。然后在本地配置 Git：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;your name&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;your email&quot;</span>  </span><br></pre></td></tr></table></figure>
<p>在 GitHub 新建一个仓库（repositry），譬如 mycode，然后即可在本地进行远程仓库操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> mycode <span class="comment">#创建本地仓库</span></span><br><span class="line">$ <span class="built_in">cd</span> mycode</span><br><span class="line">$ git init</span><br><span class="line">$ <span class="built_in">touch</span> hello.md</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;this is mycode&quot;</span> &gt; hello.md</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">&quot;添加 hello.md&quot;</span></span><br></pre></td></tr></table></figure>
<p>然后添加远程仓库的 SSH 地址：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote add origin git@github.com:yourName/yourRepo.git</span><br></pre></td></tr></table></figure>
<p>其中 yourName 是 GitHub 的用户名 yourRepo 是要上传的 GitHub 仓库名。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push <span class="comment">#提交给远程仓库</span></span><br><span class="line">$ git pull <span class="comment">#从远程仓库获取代码并与本地的代码库合并</span></span><br></pre></td></tr></table></figure>
<p>需要注意的一点是，GitHub 的默认主分支的名称不再是 master 而是 main，故最好将 Git 的默认主分支名称也改为 main：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global init.defaultBranch main</span><br></pre></td></tr></table></figure>
<p>其他操作并不影响，上述与 master 有关的所有内容都替换 main 即可。</p>
<h1 id="参考文献">参考文献</h1>
<ul>
<li>菜鸟教程. Git 教程[EB/OL]. <a href="https://www.runoob.com/git/git-tutorial.html">https://www.runoob.com/git/git-tutorial.html</a></li>
<li>菜鸟教程. Github 简明教程[EB/OL]. <a href="https://www.runoob.com/w3cnote/git-guide.html">https://www.runoob.com/w3cnote/git-guide.html</a></li>
<li>VGtime. Git基本原理介绍[EB/OL]. <a href="https://blog.csdn.net/JKR10000/article/details/110453547">https://blog.csdn.net/JKR10000/article/details/110453547</a></li>
<li>raoxiaoya. git深入理解(一)：暂存区(Stage)，索引(index)[EB/OL]. <a href="https://blog.csdn.net/raoxiaoya/article/details/110824019">https://blog.csdn.net/raoxiaoya/article/details/110824019</a></li>
</ul>
]]></content>
      <categories>
        <category>Efficient Technology</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML 与 CSS</title>
    <url>/2022/05/16/HTML%20%E4%B8%8E%20CSS/</url>
    <content><![CDATA[<p>前端 HTML 与 CSS 的基础知识整理。<br />
内容包括：<br />
1.HTML 常用标签及其用法<br />
2.CSS 常用属性及其描述</p>
<h1 id="摘要">摘要</h1>
<p>一个 Web 页面是如何在浏览器上展示的？我们在浏览器上查看网页源代码，可看到众多的标签、符号和文字，这就是一个 HTML 文件，而浏览器可以将这个文件解析成一个 Web 页面。一个 Web 页面如何设计样式、呈现出精美的视觉效果？则需要通过 CSS 对 HTML 进行加工美化。</p>
<hr>
<span id="more"></span>
<p><strong>文章索引</strong></p>
<ul>
<li><a href="#摘要">摘要</a></li>
<li><a href="#html">HTML</a>
<ul>
<li><a href="#简介">简介</a></li>
<li><a href="#基本架构">基本架构</a></li>
<li><a href="#html-标签">HTML 标签</a>
<ul>
<li><a href="#基本标签">基本标签</a></li>
<li><a href="#文本格式化">文本格式化</a></li>
<li><a href="#特殊标签">特殊标签</a></li>
</ul></li>
</ul></li>
<li><a href="#css">CSS</a>
<ul>
<li><a href="#简介-1">简介</a></li>
<li><a href="#css-语法">CSS 语法</a>
<ul>
<li><a href="#基本形式">基本形式</a></li>
<li><a href="#文本属性">文本属性</a></li>
<li><a href="#结构属性">结构属性</a></li>
</ul></li>
</ul></li>
<li><a href="#参考文献">参考文献</a></li>
</ul>
<hr>
<h1 id="html">HTML</h1>
<h2 id="简介">简介</h2>
<p>HTML (HyperText Markup Language) <strong>超文本标记语言</strong>，何谓超文本？简单来说，超文本指具有超链接功能的文本，即一个超文本可以由若干个超链接构成，最常见的应用场景便是 Web 页面，也用于其他领域，譬如 Markdown 文档是基于 HTML 简化而来。</p>
<h2 id="基本架构">基本架构</h2>
<p><code>&lt;html&gt;</code> 标签：表明是一个 HTML 文档。<br />
<code>&lt;title&gt;</code> 标签：定义文档的标题。<br />
<code>&lt;body&gt;</code> 标签：定义文档的内容主体。<br />
<code>&lt;p&gt;</code> 标签：定义一个段落。<br />
<code>&lt;br /&gt;</code> 标签：换行标签。</p>
<p><strong>注：莫要忘记加上结束标签！</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            Hello World!<span class="tag">&lt;<span class="name">br</span> /&gt;</span>Hello Web! </span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这段代码在浏览器中的效果：</p>
<html>
<title>
demo
</title>
<body>
<p>
Hello World!<br />Hello Web!
</p>
</body>
</html>
<h2 id="html-标签">HTML 标签</h2>
<h3 id="基本标签">基本标签</h3>
<p><code>&lt;html&gt;</code> 标签：表示是一个 HTML 文档。<br />
<code>&lt;title&gt;</code> 标签：定义文档的标题。<br />
<code>&lt;body&gt;</code> 标签：定义文档的内容主体。<br />
<code>&lt;p&gt;</code> 标签：定义一个段落。<br />
<code>&lt;br /&gt;</code> 标签：表示换行。<br />
<code>&lt;h&gt;</code> 标签：定义文本中的标题。<br />
<code>&lt;hr&gt;</code> 标签：表示一条水平分割线。<br />
<code>&lt;!-- --&gt;</code> 标签：定义注释。</p>
<h3 id="文本格式化">文本格式化</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>粗体<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>斜体<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>强调文字<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">small</span>&gt;</span>小号文字<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>加重视觉效果<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sub</span>&gt;</span>上标<span class="tag">&lt;/<span class="name">sub</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sup</span>&gt;</span>下标<span class="tag">&lt;/<span class="name">sup</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ins</span>&gt;</span>插入字<span class="tag">&lt;/<span class="name">ins</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>删除字<span class="tag">&lt;/<span class="name">del</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>这段代码解析后为：</p>
<p><b>粗体</b><br /> <i>斜体</i><br /> <em>强调文字</em><br /> <small>小号文字</small><br /> <strong>加重视觉效果</strong><br /> <sub>上标</sub><br /> <sup>下标</sup><br /> <ins>插入字</ins><br /> <del>删除字</del><br /></p>
<h3 id="特殊标签">特殊标签</h3>
<p><strong>链接</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://cohanbb.github.io/&quot;</span>&gt;</span>这是一条链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><a href="http://cohanbb.github.io/">这是一条链接</a></p>
<p><strong>图像</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://i-1-lanrentuku.52tup.com/2020/7/10/b87c8e05-344a-48d1-869f-ef6929fc8b17.jpg?imageView2/2/w/1024/&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片加载失败&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://i-1-lanrentuku.52tup.com/2020/7/10/b87c8e05-344a-48d1-869f-ef6929fc8b17.jpg?imageView2/2/w/1024/" alt="图片加载失败" width="300" height="300"/></p>
<p><strong>预格式文本</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">    预格式文本</span><br><span class="line">        文本会保留换行和空格</span><br><span class="line">            文本换为等线体，常用于表示代码块</span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>
<pre>
    预格式文本
        文本会保留换行和空格
            文本换为等线体，常用于表示代码块
</pre>
<p><strong>代码和代码块</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span>printf(&#x27;代码&#x27;)<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span>printf(&#x27;代码块&#x27;);<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span>return;<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>printf('代码')</code></p>
<pre>
    <code>printf('代码块');</code>
    <code>return;</code>
</pre>
<p><strong>表格</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>标题1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>标题2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row 1, cell 1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row 1, cell 2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row 2, cell 1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row 2, cell 2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<table border="1">
<tr>
<th>
标题1
</th>
<th>
标题2
</th>
</tr>
<tr>
<td>
row 1, cell 1
</td>
<td>
row 1, cell 2
</td>
</tr>
<tr>
<td>
row 2, cell 1
</td>
<td>
row 2, cell 2
</td>
</tr>
</table>
<p><strong>列表</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">有序列表</span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>YES<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>NO<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">无序列表</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>yes<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>no<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">自定义列表</span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>YES<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>yes<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>NO<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>no<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>
有序列表
<ol>
<li>
YES
</li>
<li>
NO
</li>
</ol>
无序列表
<ul>
<li>
yes
</li>
<li>
no
</li>
</ul>
自定义列表
<dl>
<dt>
YES
</dt>
<dd>
yes
</dd>
<dt>
NO
</dt>
<dd>
no
</dd>
</dl>
<p><strong>引用</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span> </span><br><span class="line">    一级引用</span><br><span class="line">    <span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></span><br><span class="line">        二级引用</span><br><span class="line">    <span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
一级引用
<blockquote>
二级引用
</blockquote>
</blockquote>
<p><strong>块级元素和内联元素</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1.这是一个<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">块级元素<span class="tag">&lt;<span class="name">br</span> /&gt;</span>从新的一行出现以及结束</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">2.这是一个<span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">内联元素，不会以新行开始</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
1.这是一个
<div>
<p>块级元素<br />从新的一行出现以及结束</p>
</div>
<p>2.这是一个<span> 内联元素，不会以新行开始 </span></p>
<p><strong>表单</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;URL&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get or post&quot;</span>&gt;</span></span><br><span class="line">    username: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    password: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    单选框<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span>男<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女<span class="tag">&lt;<span class="name">br</span> /&gt;</span>    </span><br><span class="line">    复选框<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;number&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;number&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    提交表单<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<form action="URL" method="get or post">
username: <input type="text" name="username"><br /> password: <input type="password" name="password"><br /> 单选框<br /> <input type="radio" name="sex" value="male">男<br /> <input type="radio" name="sex" value="female">女<br /><br />
复选框<br /> <input type="checkbox" name="number" value="1">1<br /> <input type="checkbox" name="number" value="2">2<br /> 提交表单<br /> <input type="submit" value="submit"/>
</form>
<p><strong>脚本</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    script code, such <span class="keyword">as</span> <span class="title class_">JavaScript</span>.</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>样式</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    css <span class="selector-tag">code</span></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="css">CSS</h1>
<h2 id="简介-1">简介</h2>
<p>CSS(Cascading Style Sheets) 层叠样式表，用以定义 HTML 中元素的样式，HTML 使用 CSS 的方式有三种： 1. 内联样式：在 HTML 元素标签中使用 "style" 属性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:blue;font-family:consolas;&quot;</span>&gt;</span></span><br><span class="line">    inline</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2" type="1">
<li><p>内部样式表：在 HTML 文档 <code>&lt;header&gt;</code> 区域使用 <code>&lt;style&gt;</code> 包含 CSS。</p>
<p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    CSS <span class="selector-tag">code</span></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>外部引用：使用外部 CSS 文件定义样式。</p>
<p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;xxx.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></p></li>
</ol>
<h2 id="css-语法">CSS 语法</h2>
<h3 id="基本形式">基本形式</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[选择器]</span> &#123;</span><br><span class="line">    <span class="selector-attr">[属性]</span>: [描述];</span><br><span class="line">        ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>选择器可以是 HTML 标签，也可以是 id 或 class</p>
<ul>
<li>id 选择器只能定义标有特定 id 的元素的样式，形式为 <code>#[id]</code>。</li>
<li>class 选择器可以定义一类元素的样式，形式为 <code>.[class]</code>。</li>
</ul>
<h3 id="文本属性">文本属性</h3>
<p><strong>background</strong></p>
<ul>
<li><p>background-color:</p>
<blockquote>
<p>三种定义方式：RGB "rgb(x,x,x)"，十六进制 "#H H H"， name "black"。</p>
</blockquote></li>
<li><p>background-image:</p>
<blockquote>
<p>url('pic-url')</p>
</blockquote></li>
<li><p>background-repeat：背景图像在哪个方向重复。</p>
<blockquote>
<p>repeat, repeats-x, repeat-y, no-repeat</p>
</blockquote></li>
<li>background-attachment：背景图像是否跟随页面滚动。</li>
<li><p>background-position：背景图像的位置。</p></li>
</ul>
<p><strong>text</strong></p>
<ul>
<li>color：文本颜色。</li>
<li>direction：文本方向。</li>
<li>letter-spacing：字符间隔。</li>
<li>word-spacing：单词间隔。</li>
<li>line-height：行高。</li>
<li><p>text-align：对齐方式。</p>
<blockquote>
<p>left, right, center, justify, inherit</p>
</blockquote></li>
<li>text-indent：首行缩紧。</li>
<li>text-shadow：文本阴影。</li>
<li>text-decoration：文本画线修饰。</li>
<li><p>white-space：空白元素的处理方式。</p>
<blockquote>
<p>默认 normal，即空白元素会被浏览器忽略。<br />
nowrap 文本不会换行，一直到 <code>&lt;br&gt;</code> 标签。<br />
pre 保留空白，pre-wrap 保留空白，但是正常换行。<br />
pre-line 合并空白元素，但是保留一个空格，正常换行。</p>
</blockquote></li>
<li>word-wrap：单词的换行方式，一般用 break-word。</li>
<li><p>word-break：是否允许单词内断开，若用 break-all，则会在单词内部断开。</p></li>
</ul>
<p><strong>font</strong></p>
<ul>
<li><p>font-family：</p>
<table>
<thead>
<tr class="header">
<th>说明</th>
<th>Generic-family</th>
<th>特定系列</th>
<th>具体字体</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>有衬线体</td>
<td>Serif</td>
<td>Times, Georgia</td>
<td>"Times New Roman", "Geogria", "宋体", "仿宋"</td>
</tr>
<tr class="even">
<td>无衬线体</td>
<td>Sans-serif</td>
<td>Sans-serif</td>
<td>"Arial", "Helvetica", Verdana", "黑体" 等</td>
</tr>
<tr class="odd">
<td>等宽体</td>
<td>Monospace</td>
<td>Consolas</td>
<td>"Courier", "Courier New", "Lucinda Console"等</td>
</tr>
</tbody>
</table></li>
<li><p>font-size：</p>
<blockquote>
CSS 中表示字体大小有多种形式：
<ol type="1">
<li>px 像素值。</li>
<li>pt 磅(= 0.75px)。</li>
<li>em 相对父元素的大小。</li>
<li>rem 相对于 html 标签中 font-size 的大小，默认 1rem = 16px。</li>
<li>percentage 同 em。</li>
<li>使用绝对大小和相对大小值。</li>
</ol>
</blockquote></li>
<li>font-style：斜体样式。</li>
<li><p>font-weight：字体粗细。</p></li>
</ul>
<p><strong>链接</strong></p>
<ul>
<li>a:link：未访问过的链接。</li>
<li>a:visited：已访问过的链接。</li>
<li>a:hover：鼠标放置的链接。</li>
<li>a:active：鼠标点击的链接。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> or visited or hover or active &#123;</span><br><span class="line">    <span class="attribute">background-color</span>:; <span class="comment">/* 链接背景颜色 */</span></span><br><span class="line">    <span class="attribute">color</span>:; <span class="comment">/* 链接字体颜色 */</span></span><br><span class="line">    <span class="attribute">text-decoration</span>:; <span class="comment">/* 链接文本画线修饰 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="结构属性">结构属性</h3>
<p><strong>盒子模型</strong><br />
所有的 HTML 元素都可以看成一个盒子模型，包括外边距（margin）、边框（border）、内边距（padding）、内容（content），内容指的是文本或图像等。</p>
<p><img src="https://www.runoob.com/images/box-model.gif" /></p>
<p><strong>margin</strong></p>
<table>
<thead>
<tr class="header">
<th>属性</th>
<th>说明</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>margin-top</td>
<td>上边距</td>
<td>auto, length, percentage</td>
</tr>
<tr class="even">
<td>margin-right</td>
<td>右边距</td>
<td>auto, length, percentage</td>
</tr>
<tr class="odd">
<td>margin-bottom</td>
<td>下边距</td>
<td>auto, length, percentage</td>
</tr>
<tr class="even">
<td>margin-left</td>
<td>左边距</td>
<td>auto, length, percentage</td>
</tr>
<tr class="odd">
<td>margin</td>
<td>以上四个可简写为 margin</td>
<td>按个数 4，3，2，1 依次表示：<br /> 上，右，下，左；上，左右，下；上下，左右；全部外边距。</td>
</tr>
</tbody>
</table>
<p><strong>border</strong></p>
<ul>
<li><p>border-width：边框的宽度。</p>
<blockquote>
<ol type="1">
<li>可以用 thin, medium, thick, length, inherit 表示。</li>
<li>按个数 4，3，2，1 依次表示：上，右，下，左；上，左右，下；上下，左右；全部边框的宽度。</li>
</ol>
</blockquote></li>
<li><p>border-color：边框的颜色。</p>
<blockquote>
<ol type="1">
<li>RGB 十六进制 name 三种表示法。</li>
<li>按个数 4，3，2，1 依次表示：上，右，下，左；上，左右，下；上下，左右；全部边框的颜色。</li>
</ol>
</blockquote></li>
<li><p>border-style：边框的风格。</p>
<blockquote>
<ol type="1">
<li>无边框 none，点线边框 dotted，虚线边框 dashed，实线边框 solid，两个实线边框 double，3D沟槽边框 groove，3D脊边框 ridge，3D嵌入边框 inset，3D突出边框 outset。</li>
<li>按个数 4，3，2，1 依次表示： 上，右，下，左；上，左右，下；上下，左右；全部边框的风格。</li>
</ol>
</blockquote></li>
<li><p>border-[none/top/right/bottom/left]：以上三个简写。</p>
<blockquote>
<p>参数依次为：[width],[style],[color]</p>
</blockquote></li>
<li><p>border-radius：设置圆角边框。</p>
<blockquote>
<p>length 或 percentage。</p>
</blockquote></li>
<li><p>border-[top/right/bottom/left]-[width/style/color]：设置某一边的某一个属性。</p></li>
</ul>
<p><strong>padding</strong><br />
使用方法与 margin 类似。</p>
<p><strong>display</strong><br />
典型的块元素：<code>&lt;p&gt;</code> <code>&lt;div&gt;</code> <code>&lt;pre&gt;</code> <code>&lt;h&gt;</code>，典型的内联元素：<code>&lt;a&gt;</code> <code>&lt;span&gt;</code> <code>&lt;code&gt;</code>，display 可以更改元素的显示方式。</p>
<ul>
<li>inline： 内联元素。</li>
<li>block：块元素。</li>
</ul>
<p><strong>overflow</strong></p>
<ul>
<li>visible：默认值，超出的内容会呈现在边框外面。</li>
<li>hidden：溢出内容被修剪，且被隐藏。</li>
<li>scroll：溢出内容被修剪，显示滚动条。</li>
<li>auto：浏览器根据情况自动添加滚动条。</li>
<li>inherit：继承父元素的 overflow 属性值。</li>
</ul>
<h1 id="参考文献">参考文献</h1>
<ul>
<li>菜鸟教程. HTML 教程[EB/OL]. <a href="https://www.runoob.com/html/html-tutorial.html">https://www.runoob.com/html/html-tutorial.html</a></li>
<li>菜鸟教程. CSS 教程[EB/OL]. <a href="https://www.runoob.com/css/css-tutorial.html">https://www.runoob.com/css/css-tutorial.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Programming Language</category>
      </categories>
      <tags>
        <tag>Web 前端</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP_A Fundamental Perspective</title>
    <url>/2022/05/10/PHP/</url>
    <content><![CDATA[<h1 id="摘要">摘要</h1>
<p>PHP (Hypertext Preprocessor) 超文本预处理器，一种开源的、一般运行在服务器上的开源脚本语言，具有跨平台性、与几乎所有 Web 服务器兼容、与大量的数据库兼容。<br />
PHP 属于类 C 语言，解释器也使用 C 语言编写，大部分语法与 C 语言相通，如果有良好的 C 语言的基础，可以快速地入门 PHP。<br />
PHP 文件可以包含 PHP 代码、HTML 和 JavaScript 代码，在服务端执行，与数据库进行交互后生成 HTML 文件通过 Web 服务器返回给浏览器。</p>
<hr>
<span id="more"></span>
<p><strong>本文索引</strong></p>
<ul>
<li><a href="#摘要">摘要</a></li>
<li><a href="#基本形式">基本形式</a></li>
<li><a href="#php-基础语法">PHP 基础语法</a>
<ul>
<li><a href="#常变量和数据类型">常变量和数据类型</a>
<ul>
<li><a href="#php-数据类型">PHP 数据类型</a></li>
<li><a href="#php-常量">PHP 常量</a></li>
<li><a href="#php-变量及全局变量">PHP 变量及全局变量</a></li>
<li><a href="#php-字符串">PHP 字符串</a></li>
<li><a href="#php-数组">PHP 数组</a></li>
</ul></li>
<li><a href="#语句">语句</a>
<ul>
<li><a href="#选择语句">选择语句</a></li>
<li><a href="#循环语句">循环语句</a></li>
</ul></li>
<li><a href="#函数">函数</a></li>
</ul></li>
<li><a href="#php-进阶">PHP 进阶</a>
<ul>
<li><a href="#php-面向对象">PHP 面向对象</a></li>
<li><a href="#php-http">PHP HTTP</a>
<ul>
<li><a href="#http">HTTP</a></li>
<li><a href="#get-和-post">GET 和 POST</a></li>
<li><a href="#cookie-和-session">Cookie 和 Session</a></li>
</ul></li>
<li><a href="#php-操作数据库">PHP 操作数据库</a></li>
<li><a href="#php-文件包含">PHP 文件包含</a></li>
<li><a href="#php-文件读写">PHP 文件读写</a></li>
<li><a href="#php-文件上传">PHP 文件上传</a></li>
<li><a href="#php-命令执行">PHP 命令执行</a></li>
<li><a href="#php-过滤器">PHP 过滤器</a></li>
</ul></li>
</ul>
<hr>
<h1 id="基本形式">基本形式</h1>
<p>一个 PHP 文件通常包含 HTML 和 PHP 脚本，基本形式为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="meta">&lt;?php</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h1 id="php-基础语法">PHP 基础语法</h1>
<h2 id="常变量和数据类型">常变量和数据类型</h2>
<h3 id="php-数据类型">PHP 数据类型</h3>
<p>与 C/C++、Java、C#、Go 甚至 Python 这些强类型语言不同，PHP 是一种弱类型语言，PHP 有 8 种数据类型：</p>
<ul>
<li>Integer：整数型</li>
<li>Float：浮点数型</li>
<li>String：字符串型</li>
<li>Boolean：布尔型</li>
<li>Array：数组</li>
<li>Object：对象</li>
<li>Null：空</li>
<li>Resource：资源型</li>
</ul>
<p>各种变量的定义方式：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">/* 整型 */</span></span><br><span class="line">    <span class="variable">$a</span> = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 浮点型 */</span></span><br><span class="line">    <span class="variable">$b1</span> = <span class="number">1.1</span>;</span><br><span class="line">    <span class="variable">$b2</span> = <span class="number">9.9e-10</span>;</span><br><span class="line">    <span class="variable">$b3</span> = <span class="number">5E-10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 字符串 */</span></span><br><span class="line">    <span class="variable">$c</span> = <span class="string">&quot;PHP&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* bool 型 */</span></span><br><span class="line">    <span class="variable">$d1</span> = <span class="literal">TRUE</span>;</span><br><span class="line">    <span class="variable">$d2</span> = <span class="literal">FALSE</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 数组 */</span></span><br><span class="line">    <span class="variable">$e</span> = <span class="keyword">array</span>(<span class="string">&quot;I&quot;</span>, <span class="string">&quot;LOVE&quot;</span>, <span class="string">&quot;YOU&quot;</span>); </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 类与对象 */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">F</span> </span>&#123;</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$f</span> = <span class="keyword">new</span> F;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* Null */</span></span><br><span class="line">    <span class="variable">$g</span> = <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* resource 型 */</span></span><br><span class="line">    <span class="variable">$h1</span> = <span class="title function_ invoke__">mysqli_connect</span>(...);</span><br><span class="line">    <span class="variable">$h2</span> = <span class="title function_ invoke__">fopen</span>(...);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>由于 PHP 是弱类型语言，故 PHP 有两种比较方式：</p>
<ul>
<li>松散比较：使用两个等号 <code>==</code> 进行比较，只比较值，不比较数据类型。</li>
<li>严格比较：使用三个等号 <code>===</code> 进行比较，既比较值，又比较数据类型。</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">TRUE</span> == <span class="string">&quot;TRUE&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;相等1&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="literal">TRUE</span> === <span class="string">&quot;TRUE&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;相等2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将输出：相等1</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="php-常量">PHP 常量</h3>
<p>PHP 常量的定义需要使用 <code>define()</code> 函数，函数用法为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">/* $name 为常量名，$value 为常量值，$case_insensitive 表示常量名是否大小写不敏感 */</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="title function_ invoke__">define</span>(<span class="keyword">string</span> <span class="variable">$name</span>, <span class="keyword">mixed</span> <span class="variable">$value</span> [, <span class="keyword">bool</span> <span class="variable">$case_insensitive</span> = <span class="literal">false</span>])</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">define</span>(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="literal">TRUE</span>);</span><br><span class="line">    <span class="keyword">echo</span> a;</span><br><span class="line">    <span class="keyword">echo</span> A; </span><br><span class="line">    <span class="comment">// 将输出两次 123</span></span><br><span class="line">    <span class="comment">// 若没有设置为大小写不敏感，则 echo a 将报错</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="php-变量及全局变量">PHP 变量及全局变量</h3>
<p>PHP 一个变量需要在变量名前加上符号 <code>$</code>，变量名是区分大小写的，例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$x</span> = <span class="number">7</span>;</span><br><span class="line">    <span class="variable">$y</span> = <span class="number">7.7</span>;</span><br><span class="line">    <span class="variable">$zz</span> = <span class="string">&quot;Hello PHP!&quot;</span>;</span><br><span class="line">    <span class="variable">$ZZ</span> = <span class="string">&quot;Hi PHP!&quot;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>PHP 在局部使用全局变量：</p>
<ol type="1">
<li><p>使用 global 关键字声明全局变量，如：</p>
<p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$a</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="variable">$b</span> = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Maxab</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$a</span>, <span class="variable">$b</span>;  <span class="comment">// 声明使用全局变量 a 和 b</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$a</span> &gt;= <span class="variable">$b</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$a</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$b</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>使用 <code>$GLOBALS</code> 超级全局变量数组直接调用变量，如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$a</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="variable">$b</span> = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Maxab</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$GLOBALS</span>[<span class="string">&quot;a&quot;</span>] &gt;= <span class="variable">$GLOBALS</span>[<span class="string">&quot;b&quot;</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$GLOBALS</span>[<span class="string">&quot;a&quot;</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$GLOBALS</span>[<span class="string">&quot;b&quot;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p><code>$GLOBALS</code> 是包含了全部变量的数组，除了 <code>$GLOBALS</code> 之外，PHP 还有几个超级全局变量：</p>
<ol type="1">
<li><code>$_SERVER</code>：存储服务器信息和执行环境。</li>
<li><code>$_REQUEST</code>：收集 HTML 表单提交的数据，包括 get 和 post 方式提交的数据以及 cookie。</li>
<li><code>$_POST</code>：收集 HTML 表单使用 post 方式提交的数据。</li>
<li><code>$_GET</code>：收集 HTML 表单使用 get 方式提交的数据，或 URL 提交的数据。</li>
<li><code>$_FILES</code>：存储上传文件的信息。</li>
<li><code>$_ENV</code>：存储服务器的环境变量。</li>
<li><code>$_COOKIE</code>：存储 cookie 信息。</li>
<li><code>$_SESSION</code>：存储 session 信息。</li>
</ol>
<h3 id="php-字符串">PHP 字符串</h3>
<p>PHP 中需掌握三种字符串操作：</p>
<ol type="1">
<li><p>并置运算符 <code>.</code> 用于连接两个字符串，如：</p>
<p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$str1</span> = <span class="string">&quot;Hel&quot;</span>;</span><br><span class="line">    <span class="variable">$str2</span> = <span class="string">&quot;leo&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$str1</span> . <span class="variable">$str2</span>; <span class="comment">// 将输出 Hello</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p></li>
<li><code>strlen()</code> 函数，同 C 语言，返回字符串的长度。</li>
<li><p><code>strpos()</code> 函数，在字符串内查找一段文本，若查找到会返回该文本第一次出现的位置，若未查找到则返回 <code>FALSE</code>，如： <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">strpos</span>(<span class="string">&quot;Hello Hello&quot;</span>, <span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p></li>
</ol>
<p>字符串既可以用单引号也可以用双引号，二者的主要区别：</p>
<ol type="1">
<li>双引号可以解释变量，单引号不解释变量。</li>
<li>单引号的解析速度更快。</li>
</ol>
<h3 id="php-数组">PHP 数组</h3>
<p>PHP 中数组类型：</p>
<ol type="1">
<li>数值数组：带有数字键值的数组，键值为从 0 开始的数字。</li>
<li>关联数组：自定义键值的数组。</li>
<li>多维数组：多维度的数组。</li>
</ol>
<p>定义方式如下：</p>
<p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">     <span class="comment">/* 数值数组 */</span></span><br><span class="line">     <span class="variable">$a</span> = <span class="keyword">array</span>(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line">     <span class="keyword">echo</span> a[<span class="number">0</span>];</span><br><span class="line">     <span class="keyword">echo</span> a[<span class="number">1</span>];</span><br><span class="line">     <span class="keyword">echo</span> a[<span class="number">2</span>];</span><br><span class="line">     <span class="keyword">foreach</span> (<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="variable">$value</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 关联数组 */</span></span><br><span class="line">    <span class="variable">$b</span> = <span class="keyword">array</span>(<span class="string">&quot;a&quot;</span> =&gt; <span class="string">&quot;1&quot;</span>, <span class="string">&quot;b&quot;</span> =&gt; <span class="string">&quot;2&quot;</span>, <span class="string">&quot;c&quot;</span> =&gt; <span class="string">&quot;3&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> b[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">    <span class="keyword">echo</span> b[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line">    <span class="keyword">echo</span> b[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$b</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$x_value</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$x</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$x_value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 多维数组 */</span></span><br><span class="line">    <span class="variable">$c</span> = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&quot;c1&quot;</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">            <span class="keyword">array</span>(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>),</span><br><span class="line">            <span class="keyword">array</span>(<span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>)</span><br><span class="line">        ),</span><br><span class="line">        <span class="string">&quot;c2&quot;</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">            <span class="keyword">array</span>(<span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;9&quot;</span>),</span><br><span class="line">            <span class="keyword">array</span>(<span class="string">&quot;10&quot;</span>, <span class="string">&quot;11&quot;</span>, <span class="string">&quot;12&quot;</span>)</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>常用函数：</p>
<ul>
<li><code>count()</code>：可以返回数组的长度。</li>
<li><code>sort()</code>：进行升序排序。</li>
<li><code>rsort()</code>：进行降序排序。</li>
<li><code>asort()</code>：根据关联值进行升序排序。</li>
<li><code>ksort()</code>：根据关联键值进行升序排序。</li>
<li><code>arsort()</code>：根据关联值进行降序排序。</li>
<li><code>krsort()</code>：根据关联键值进行降序排序。</li>
</ul>
<h2 id="语句">语句</h2>
<h3 id="选择语句">选择语句</h3>
<p>PHP 中的选择语句与 C 语言完全相同，使用 <code>if-else</code> 语句或 <code>switch-case</code> 语句。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">/* if-else 语句 */</span></span><br><span class="line">    <span class="keyword">if</span> (condition1) &#123;</span><br><span class="line">        statement</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (condition2) &#123;</span><br><span class="line">        statement</span><br><span class="line">    &#125; </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * ......</span></span><br><span class="line"><span class="comment">       */</span> </span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        statement</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* switch-case 语句 */</span></span><br><span class="line">    <span class="keyword">switch</span> (expression) &#123;</span><br><span class="line">        <span class="keyword">case</span> value1: </span><br><span class="line">            statement</span><br><span class="line">        <span class="keyword">case</span> value2: </span><br><span class="line">            statement</span><br><span class="line">        <span class="comment">/** </span></span><br><span class="line"><span class="comment">         * ...... </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">break</span>;  <span class="comment">// 遇到 break 才会终止</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            statement</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="循环语句">循环语句</h3>
<p>PHP 中的循环语句在 C 语言提供的 <code>while</code>、<code>do while</code>、<code>for</code> 的基础上又提供了一种 <code>foreach</code>。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">/* while 型 */</span></span><br><span class="line">    <span class="keyword">while</span> (condition) &#123;</span><br><span class="line">        statement</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* do-while 型 */</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        statement</span><br><span class="line">    &#125; <span class="keyword">while</span> (condition)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* for 型 */</span></span><br><span class="line">    <span class="keyword">for</span> (initializing; condition; addition) &#123;</span><br><span class="line">        statement</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* foreach 型用于遍历数组 */</span></span><br><span class="line">    <span class="variable">$a</span> = <span class="keyword">array</span> (<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$value</span>;</span><br><span class="line">    &#125;   <span class="comment">// 将输出 123</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="函数">函数</h2>
<p>PHP 内建了大量的函数，功能强大，在下文会列举几个关键函数。</p>
<p>PHP 是脚本语言，直接由 PHP 解释器解释执行，不需要进行编译，故函数可以在代码中的任意位置定义，不需要在调用前进行声明，函数的定义方法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">function_identifier</span>(<span class="params">parameter_list</span>) </span>&#123;</span><br><span class="line">        statement</span><br><span class="line">        <span class="keyword">return</span> ... ;    <span class="comment">// 返回值    </span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="php-进阶">PHP 进阶</h1>
<h2 id="php-面向对象">PHP 面向对象</h2>
<p>PHP 面向对象的使用方法与 C++ 类似：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">php_class</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* 成员变量 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var1</span>;</span><br><span class="line">    <span class="comment">// var $var1;</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$var2</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var3</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 构造函数 */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$par1</span>, <span class="variable">$par2</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;var1 = <span class="variable">$par1</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;var2 = <span class="variable">$par2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 析构函数 */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;销毁对象&quot;</span> . this-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 成员函数 */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"><span class="variable">$par</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$par</span>;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 声明对象 */</span></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> <span class="title class_">php_class</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 调用成员函数 */</span></span><br><span class="line"><span class="variable">$obj</span> -&gt; <span class="title function_ invoke__">fun</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 继承 */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">child_class</span> <span class="keyword">extends</span> <span class="title">php_class</span> </span>&#123;</span><br><span class="line">    statement</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 接口 */</span></span><br><span class="line"><span class="comment">// 声明接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">parameter_list</span>)</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span> <span class="keyword">implements</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">parameter_list</span>) </span>&#123;</span><br><span class="line">        statement</span><br><span class="line">    &#125; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 抽象类 */</span></span><br><span class="line"><span class="comment">// 定义抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params">parameter_list</span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span> <span class="keyword">extends</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params">parameter_list</span>) </span>&#123;</span><br><span class="line">        statement</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="php-http">PHP HTTP</h2>
<h3 id="http">HTTP</h3>
<p>使用 <code>header()</code> 函数向浏览器发送 HTTP 报头，函数原型为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * string 表示要发送的报头字符串</span></span><br><span class="line"><span class="comment">     * replace 表示是否代替原来的报头，默认 TRUE</span></span><br><span class="line"><span class="comment">     * http_response_code 可选，表示把 HTTP 响应强制为指定的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="keyword">string</span>, replace, http_response_code)</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>例如想要在新的页面定向到某个 URL：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: https://cohanbb.github.io/&quot;</span>, <span class="literal">FALSE</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="get-和-post">GET 和 POST</h3>
<p><code>$_GET[]</code> 和 <code>$_POST[]</code> 两个数组分别用来收集 HTML 使用 get 和 post 方式提交的数据。</p>
<p>例如想要收集 get 方式提交的数据 DEMO:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* demo.php */</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;demo.php&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;DEMO&quot;</span>/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> name=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;submit&quot;</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$demo</span> = <span class="variable">$_GET</span>[<span class="string">&quot;DEMO&quot;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$demo</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="cookie-和-session">Cookie 和 Session</h3>
<p>何谓 Cookie？</p>
<blockquote>
<p>cookie 常用于识别用户，cookie 是一种服务器留在用户计算机上的小文件。每当同一台计算机通过浏览器请求页面时，这台计算机将会发送 cookie。</p>
</blockquote>
<p>PHP 使用 <code>setcookie()</code> 函数设置 cookie：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">/* 函数原型 */</span></span><br><span class="line">    <span class="title function_ invoke__">setcookie</span>(name, value, expire, path, domain);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置 cookie 并于 3600 秒后过期 */</span></span><br><span class="line">    <span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;Cohanbb&quot;</span>, <span class="title function_ invoke__">time</span>() + <span class="number">3600</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>$_COOKIE_</code> 存储设置的 cookie 值：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$_COOKIE</span>[<span class="string">&quot;user&quot;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>删除 cookie：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">/* 将时间设为过去的时间即可删除 cookie */</span></span><br><span class="line">    <span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="title function_ invoke__">time</span>() - <span class="number">1</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>何谓 Session？</p>
<blockquote>
<p>在计算机上操作某个应用程序时，打开它、做些更改、关闭它，这很像一次对话。你所操作的计算机知道你是谁，它清楚你在何时打开和关闭应用程序。然而由于 HTTP 地址无法保持状态，Web 服务器并不知道你是谁以及你做了什么。<br />
session 解决了这个问题，它通过在服务器上存储用户信息以便随后使用（比如用户名称、购买商品等）。会话信息是临时的，在用户离开网站后将被删除。如果需要永久存储信息，可以把数据存储在数据库中。<br />
session 的工作机制是：为每个访客创建一个唯一的 id (UID)，并基于这个 UID 来存储变量。UID 存储在 cookie 中，或者通过 URL 进行传导。</p>
</blockquote>
<p>PHP 操作 session：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">session_start</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置 session */</span></span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;Cohanbb&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 获取 session */</span></span><br><span class="line">    <span class="variable">$name</span> = <span class="variable">$_SESSION</span>[<span class="string">&quot;name&quot;</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 清空 session */</span></span><br><span class="line">    <span class="title function_ invoke__">session_unset</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 销毁 session */</span></span><br><span class="line">    <span class="title function_ invoke__">session_destroy</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="php-操作数据库">PHP 操作数据库</h2>
<p>PHP 通过 <code>MySQLi</code> 或 <code>PDO</code> 连接和操作数据库，<code>PDO</code> 可以应用在12种不同的数据库，<code>MySQLi</code> 只能应用在 MySQL 数据库，在此仅演示 <code>MySQLi</code>。</p>
<p><code>MySQLi</code> 可以面向过程也可以面向对象，写法上有一些差异。</p>
<p><strong>连接数据库</strong><br />
使用 <code>mysqli_connect()</code> 函数连接数据库，或面向对象：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">/* 面向过程*/</span></span><br><span class="line">    <span class="variable">$conn</span> = my <span class="title function_ invoke__">sqli_connect</span>(<span class="string">&quot;localhost&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$conn</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;数据库连接失败：&quot;</span> . <span class="title function_ invoke__">mysqli_connect_error</span>()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;数据库连接成功&quot;</span>;</span><br><span class="line">    <span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$conn</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 面向对象 */</span></span><br><span class="line">    <span class="variable">$conn</span> = <span class="keyword">new</span> <span class="title class_">mysqli</span>(<span class="string">&quot;localhost&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$conn</span>-&gt;connect_error) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;数据库连接失败：&quot;</span> . <span class="variable">$conn</span>-&gt;connect_error);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;数据库连接成功&quot;</span>;</span><br><span class="line">    <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>使用 SQL 语句</strong><br />
使用 <code>mysqli_query()</code> 函数连接 SQL 语句，或面向对象：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">/* 面向过程 */</span></span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM users&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$conn</span>, <span class="variable">$sql</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;查询失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 面向对象 */</span></span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM users&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;查询失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>其他常用函数</strong></p>
<ul>
<li>使用 <code>mysqli_error()</code> 函数返回最近调用函数的最后一个错误的描述。</li>
<li>使用 <code>mysqli_errno()</code> 函数返回最近调用函数的最后一个错误代码。</li>
<li>使用 <code>mysqli_affected_rows()</code> 函数返回上一个 SQL 语句影响的行。<br />
</li>
<li>使用 <code>mysqli_real_escape_string()</code> 函数转义 SQL 语句中的特殊字符，可用于防注入。<br />
</li>
<li><p>使用 <code>mysqli_fetch_xxx()</code> 函数从查询结构中返回一些数据：</p>
<ul>
<li><code>mysqli_fetch_all()</code> 从结果集中取得所有行作为关联/数值数组<br />
</li>
<li><code>mysqli_fetch_array()</code> 从结果集中取得一行作为关联/数值数组<br />
</li>
<li><code>mysqli_fetch_assoc()</code> 从结果中取得一行作为关联数组<br />
</li>
<li><code>mysqli_fetch_object()</code> 从结果中取得一行作为对象</li>
</ul></li>
</ul>
<h2 id="php-文件包含">PHP 文件包含</h2>
<p>PHP 有四种文件包含方式：</p>
<ul>
<li><code>include</code></li>
<li><code>include_once</code></li>
<li><code>require</code></li>
<li><code>require_once</code></li>
</ul>
<p>其中 <code>include</code> 和 <code>require</code> 的区别是，二者处理错误的方式不同，前者生成一个警告，出错后脚本继续执行，后者生成一个致命错误，脚本停止执行。<br />
后面带上 <code>_once</code> 的作用是如果之前已经包含了该文件，则不会再次包含，即防止多次包含同一个文件。</p>
<p>常用文件包含语句：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">/* 普通方式包含 */</span></span><br><span class="line">    <span class="keyword">include</span> <span class="string">&quot;file.php&quot;</span>;</span><br><span class="line">    <span class="keyword">require</span> <span class="string">&quot;file.php&quot;</span>;</span><br><span class="line">    <span class="keyword">include_once</span> <span class="string">&quot;file.php&quot;</span>;</span><br><span class="line">    <span class="keyword">require_once</span> <span class="string">&quot;file.php&quot;</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* get 方式传参包含 */</span></span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;FILE&quot;</span>];</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">require</span>(<span class="variable">$file</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="php-文件读写">PHP 文件读写</h2>
<p>PHP 中使用 <code>fopen()</code> 函数打开文件，<code>fwrite()</code> 函数写入文件，<code>fclose()</code> 函数关闭文件，用法如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>); <span class="comment">// 以只读方式打开 test.txt 文件</span></span><br><span class="line">    <span class="variable">$str</span> = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">    <span class="title function_ invoke__">fwrite</span>(<span class="variable">$file</span>, <span class="string">&quot;str&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">fclose</span>(<span class="variable">$file</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>fopen()</code> 函数第二个参数表示打开文件的模式：</p>
<table>
<thead>
<tr class="header">
<th>Patterns</th>
<th>Descriptions</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>r</td>
<td>只读，从文件开头开始。</td>
</tr>
<tr class="even">
<td>r+</td>
<td>读写，从文件开头开始。</td>
</tr>
<tr class="odd">
<td>w</td>
<td>只写，且清空文件内容，若文件不存在则新建。</td>
</tr>
<tr class="even">
<td>w+</td>
<td>读写，且清空文件内容，若文件不存在则新建。</td>
</tr>
<tr class="odd">
<td>a</td>
<td>只写，从文件末尾进行追加，若文件不存在则新建。</td>
</tr>
<tr class="even">
<td>a+</td>
<td>读写，从文件末尾进行追加，若文件不存在则新建。</td>
</tr>
<tr class="odd">
<td>x</td>
<td>只写，创建一个新文件，若文件已存在则返回 FALSE 并报错。</td>
</tr>
<tr class="even">
<td>x+</td>
<td>读写，创建一个新文件，若文件已存在则返回 FALSE 并报错。</td>
</tr>
</tbody>
</table>
<h2 id="php-文件上传">PHP 文件上传</h2>
<p>PHP 使用 <code>$_FILES</code> 超级全局变量进行文件上传，<code>$_FILES</code> 是一个二维数组，结构如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_FILES</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="comment">/* 假设 filename 为 HTML 表单中 &lt;input &quot;name&quot; /&gt; 的值 */</span></span><br><span class="line">    <span class="string">&quot;filename&quot;</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&quot;name&quot;</span> =&gt; 被上传的文件名称</span><br><span class="line">        <span class="string">&quot;type&quot;</span> =&gt; 被上传的文件类型</span><br><span class="line">        <span class="string">&quot;tmp_name&quot;</span> =&gt; 被上传的文件在服务器中暂时的路径和名称</span><br><span class="line">        <span class="string">&quot;error&quot;</span> =&gt; 上传过程有无错误</span><br><span class="line">        <span class="string">&quot;size&quot;</span> =&gt; 被上传文件的大小</span><br><span class="line">        )</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>在此我给出一个简单的文件上传程序：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;upload.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>请上传文件：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;filename&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;确认上传&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">upload.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">/* 限制上传文件的类型和大小 */</span></span><br><span class="line">    <span class="keyword">if</span> (((<span class="variable">$_FILES</span>[<span class="string">&quot;filename&quot;</span>][<span class="string">&quot;type&quot;</span>] == <span class="string">&quot;image/gif&quot;</span>) </span><br><span class="line">      || (<span class="variable">$_FILES</span>[<span class="string">&quot;filename&quot;</span>][<span class="string">&quot;type&quot;</span>] == <span class="string">&quot;image/jpeg&quot;</span>) </span><br><span class="line">      || (<span class="variable">$_FILES</span>[<span class="string">&quot;filename&quot;</span>][<span class="string">&quot;type&quot;</span>] ==<span class="string">&quot;image/pjpeg&quot;</span>)) </span><br><span class="line">      &amp;&amp; (<span class="variable">$_FILES</span>[<span class="string">&quot;filename&quot;</span>][<span class="string">&quot;size&quot;</span>] &lt; <span class="number">20000</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$_FILES</span>[<span class="string">&quot;filename&quot;</span>][<span class="string">&quot;error&quot;</span>]) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;错误：&quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;filename&quot;</span>][<span class="string">&quot;error&quot;</span>] . <span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/* 输出上传的文件信息 */</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;文件名：&quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;filename&quot;</span>][<span class="string">&quot;name&quot;</span>] . <span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;文件类型：&quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;filename&quot;</span>][<span class="string">&quot;type&quot;</span>] . <span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;文件大小&quot;</span> . (<span class="variable">$_FILES</span>[<span class="string">&quot;filename&quot;</span>][<span class="string">&quot;size&quot;</span>] / <span class="number">1024</span>) . <span class="string">&quot;Kb&lt;br /&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;文件副本：&quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;filename&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>] . <span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line">            <span class="comment">/* 将文件存储在服务器 */</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="string">&quot;upload/&quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;filename&quot;</span>][<span class="string">&quot;name&quot;</span>])) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable">$_FILES</span>[<span class="string">&quot;filename&quot;</span>][<span class="string">&quot;name&quot;</span>] . <span class="string">&quot;已经存在&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;filename&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>], <span class="string">&quot;upload/&quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;filename&quot;</span>][<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;文件存储在&quot;</span> . <span class="string">&quot;upload/&quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;filename&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;无法上传该文件&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="php-命令执行">PHP 命令执行</h2>
<p>PHP 调用系统命令函数：</p>
<ul>
<li><code>system()</code>：执行系统命令，输出执行结果。</li>
<li><code>passthru()</code>：与 <code>system()</code>函数相似。</li>
<li><code>exec()</code>：执行系统命令，无回显，返回最后一行结果。</li>
<li><code>shell_exec()</code>：执行系统命令，返回完整的输出结果。</li>
<li><code>popen(command, mode)</code>：command 为执行的命令，mode 规定连接模式，可以是 r（只读）、w（只写）等。</li>
<li><code>proc_open()</code>：不直接返回执行结果，返回一个文件指针。</li>
<li><code>pcntl_exec()</code>：执行发生错误返回 FALSE，无错误不返回。</li>
</ul>
<p>命令执行的例子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$ip</span> = <span class="variable">$_GET</span>[<span class="string">&quot;ip&quot;</span>];</span><br><span class="line">    <span class="variable">$command</span> = <span class="string">&quot;ping -c 3 <span class="subst">$ip</span>&quot;</span>;</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="string">&quot;<span class="subst">$command</span>&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="php-过滤器">PHP 过滤器</h2>
<p>以网络安全为目的，常在 PHP 程序中使用 <code>Filter</code> 函数对外部数据进行过滤，外部数据指表单提交的数据、cookie、Web 服务器信息、数据库查询结果等。</p>
<p>常用的过滤函数：</p>
<ul>
<li><code>filter_var()</code>：对单一的变量使用指定过滤器过滤。</li>
<li><code>filter_var_array()</code>：对多个变量使用多个过滤器过滤。</li>
<li><code>filter_input()</code>：获取一个表单输入的内容，并指定过滤器进行过滤。</li>
<li><code>filter_input_array()</code>：获取多个表单输入的内容，并通过多个过滤器进行过滤。</li>
</ul>
<p>下面的例子使用 <code>filter_var()</code> 进行过滤：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$int</span> = <span class="number">777</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">filter_var</span>(<span class="variable">$int</span>, FILTER_VALIDATE_INT)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;不是合法的整数&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;是合法整数&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programming Language</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/02/13/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Hexo 博客搭建简单说明</title>
    <url>/2022/03/02/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>本站使用 Hexo 进行搭建，发布在 Github Page 上，Github地址：https://github.com/cohanbb <br />本文为使用 Hexo 和 Github Page 搭建个人博客网站的详细教程。<br />
步骤为：配置 git 和 hexo、配置 github、配置主题、发布文章。</p>
<hr>
<span id="more"></span>
<p><strong>本文索引</strong></p>
<ul>
<li><a href="#安装-git-和-hexo">安装 Git 和 hexo</a></li>
<li><a href="#github-page-配置">GitHub Page 配置</a></li>
<li><a href="#配置主题">配置主题</a></li>
<li><a href="#发布博客">发布博客</a></li>
</ul>
<hr>
<h1 id="安装-git-和-hexo">安装 Git 和 hexo</h1>
<ol type="1">
<li><p>安装 <a href="https://nodejs.org/en/">node.js</a>。</p></li>
<li><p>安装 <a href="https://git-scm.com/download/win">Git</a>。</p></li>
<li><p>命令行输入命令检验是否安装成功</p></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">$ npm -v</span><br><span class="line">$ git --version</span><br></pre></td></tr></table></figure>
<ol type="1">
<li><p>安装 hexo<br />
命令行输入 <code>npm install hexo-cli -g</code>，输入 <code>hexo -v</code> 检验是否安装成功。</p></li>
<li><p>初始化 hexo<br />
命令行输入 <code>hexo init [folder]</code>，[folder] 为自定义名字，作为博客的根目录。</p></li>
<li><p>根目录的结构</p>
<ul>
<li>_config.yml : 网站的配置信息，在此配置网站的功能和结构。</li>
<li>package.json: 应用程序的信息，可以查看安装的包。</li>
<li>scaffolds: 模版文件夹，Hexo 根据此来建立文件。</li>
<li>source: 资源文件夹，如 post、tags 等文件存放在此。</li>
<li>themes: 主题 文件夹。Hexo 会根据主题来生成静态页面。</li>
</ul></li>
<li><p>生成静态文件，在根目录下命令行输入 <code>hexo generate</code><br />
启动服务器，输入 <code>hexo server</code><br />
可在 http://localhost:4000/ 查看网站。</p></li>
</ol>
<h1 id="github-page-配置">GitHub Page 配置</h1>
<ol type="1">
<li><p>登录 <a href="https://github.com">GitHub</a>，新建 repository，名字必须设为 <strong>username.github.io</strong></p></li>
<li><p>复制仓库的地址 SSH/HTTPs，推荐使用HTTPs，操作简单，但是网路状况不佳；使用 SSH 方式首先需要在本地生成 SSH Key，在终端输入 <code>$ ssh-keygen -t rsa -b 4096 -C "your github email"</code>，然后登录 GitHub 将刚刚生成的公钥添加到 SSH Key 即可。</p></li>
<li><p>进入根目录下的 **_config.yml** 文件，在末尾加入：</p></li>
</ol>
<p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span> </span><br><span class="line"> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"> <span class="attr">repo:</span> <span class="string">https://github.com/username/username.github.io.git</span></span><br><span class="line"> <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></p>
<ol start="4" type="1">
<li><p>部署 GitHub<br />
需要下载插件，根目录命令行输入 <code>npm install hexo-deployer-git --save</code><br />
发布网站到GitHub Page<br />
<code>hexo deploy</code></p></li>
<li><p>然后在浏览器访问 https://username.github.io 即可进入博客主页。</p></li>
</ol>
<h1 id="配置主题">配置主题</h1>
<p>Hexo 博客默认主题为 landscape，若想修改主题，在 GitHub 上找到主题，克隆到 theme 文件夹下。本例为 next 主题。</p>
<p><strong>获取主题</strong><br />
theme文件夹下命令行输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<p>打开 next 的 _config.yml 文件，里面是 next 主题的配置信息，阅读该文档内的注释即可大致明白各部分的作用。<br />
要修改的主要内容为 <code>tags</code>, <code>categories</code>, <code>about</code>, <code>social</code>, <code>avatar</code>, <code>search</code>，网站的背景等。</p>
<p><strong>tags 和 categories</strong><br />
tags 为标签，categories 为类别。在根目录下命令行输入 <code>hexo new page tags</code> ，进入 ./source/tags/index.md，修改为：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">xxxxx</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;tags&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<p>如果想要文章加上标签，只用在文章上加入 <code>tags: xxxx</code> 即可。<br />
categories 与以上同理。</p>
<p><strong>about</strong><br />
在 next/_config.yml 文件中找到 <code>menu</code> ，可在网站中增加 about。<br />
根目录命令行输入 <code>hexo new page about</code> ，进入 ./source/about/index.md 可编辑 about 的内容。</p>
<p><strong>修改头像，网站的图标、背景</strong></p>
<ul>
<li>修改头像，next/_config.yml 文件中找到 <code>avatar</code> 可配置头像。next/source/image/ 下 avatar.gif 为头像图片，进行更改即可。更改 logo.svg 以及 favicon 图片可以修改网站的图标。</li>
<li>修改背景，在 next/_config.yml 文件查找 <code>custom</code> 可配置 style <code>style: source/_data/styles.styl</code> 后新建 ./source/_data/styles.styl 加入以下代码，后在 next/source/image 中增添背景图片，命名为 background.jpg 即可。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">/images/background.jpg</span>); //图片路径，默认</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;    //图片无法铺满时，是否重复及重复方式</span><br><span class="line">    <span class="attribute">background-attachment</span>: fixed;    //图片是否跟随滚动</span><br><span class="line">    <span class="attribute">background-size</span>: cover;    //覆盖</span><br><span class="line">    <span class="attribute">background-position</span>: center; //图片显示 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>启用search</strong><br />
安装插件，根目录下命令行输入 <code>npm install hexo-generator-searchdb --save</code><br />
根目录/_config.yml 文件中加入：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>
<p>next/_config.yml 文件中找到 <code>localsearch</code> 修改为：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># if auto, trigger search by changing input</span></span><br><span class="line">  <span class="comment"># if manual, trigger search by pressing enter key or search button</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>插入图片</strong><br />
需要将 _config.yml 中的 <code>post_asset_folder</code> 设为 true，这样新建一个博客文件将生成一个同名的目录（文件夹），将图片放入该文件夹，在 markdown 文件中使用 <code>![](图片的名称)</code> 即可正常显示图片了。</p>
<h1 id="发布博客">发布博客</h1>
<p>在根目录命令行输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new [pagename]</span><br></pre></td></tr></table></figure>
<p>即可创建新的文章，进入 ./source/_post/ 可找到该文章文件夹，编辑里面的 index.md 即为文章内容。<br />
编辑完成后根目录命令行输入以下命令发布博客。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>
<p>如果 markdown 内容中有数学公式，需要在文章上方加入 <code>mathjax: true</code>，或是在 next/_config.yml 文件中找到 <code>mathjax</code>，将 <code>per_page</code> 后改为 <code>true</code>，后者会使所有文章都自动加入 <code>mathjax: true</code>。</p>
<p>由于数学公式与 hexo 默认的 marked 渲染器有冲突，故建议卸载 marked 渲染器，使用 pandoc 渲染器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm uninstall hexo-renderer-marked --save</span><br><span class="line">$ npm install hexo-renderer-pandoc --save</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构_线性表，栈、队列和数组</title>
    <url>/2022/03/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_%E7%BA%BF%E6%80%A7%E8%A1%A8%EF%BC%8C%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<p>数据结构线性表部分的知识总结<br />
内容包括：<br />
1. 线性表的概念和代码实现<br />
2. 栈、队列的概念和代码实现<br />
3. 特殊矩阵的压缩</p>
<hr>
<span id="more"></span>
<p><strong>本文索引</strong></p>
<ul>
<li><a href="#线性表">线性表</a>
<ul>
<li><a href="#顺序表">顺序表</a>
<ul>
<li><a href="#顺序表的定义和初始化">顺序表的定义和初始化</a></li>
<li><a href="#顺序表的基本操作">顺序表的基本操作</a></li>
</ul></li>
<li><a href="#链表">链表</a>
<ul>
<li><a href="#单链表">单链表</a></li>
<li><a href="#静态链表">静态链表</a></li>
<li><a href="#双向链表">双向链表</a></li>
<li><a href="#循环链表">循环链表</a></li>
</ul></li>
<li><a href="#顺序表和链表的比较">顺序表和链表的比较</a></li>
</ul></li>
<li><a href="#栈队列和数组">栈、队列和数组</a>
<ul>
<li><a href="#栈">栈</a>
<ul>
<li><a href="#顺序栈">顺序栈</a></li>
<li><a href="#链式栈">链式栈</a></li>
</ul></li>
<li><a href="#队列">队列</a>
<ul>
<li><a href="#顺序队列循环队列">顺序队列（循环队列）</a></li>
<li><a href="#链式队列">链式队列</a></li>
<li><a href="#双端队列">双端队列</a></li>
</ul></li>
<li><a href="#栈和队列的应用">栈和队列的应用</a>
<ul>
<li><a href="#栈_括号匹配">栈_括号匹配</a></li>
<li><a href="#栈_表达式">栈_表达式</a></li>
<li><a href="#栈_递归函数调用">栈_递归函数调用</a></li>
<li><a href="#队列_层次遍历">队列_层次遍历</a></li>
<li><a href="#队列_计算机系统">队列_计算机系统</a></li>
</ul></li>
<li><a href="#数组_矩阵的压缩存储">数组_矩阵的压缩存储</a>
<ul>
<li><a href="#对称矩阵">对称矩阵</a></li>
<li><a href="#三角矩阵">三角矩阵</a></li>
<li><a href="#三对角矩阵">三对角矩阵</a></li>
<li><a href="#稀疏矩阵">稀疏矩阵</a></li>
</ul></li>
</ul></li>
</ul>
<hr>
<p>线性表、栈和队列的完整代码均已上传到我的 GitHub：</p>
<ul>
<li><a href="https://github.com/Cohanbb/mycode/tree/main/c-cpp/DS">C/C++ 实现</a> <!--* [Go 实现](https://github.com/Cohanbb/mycode/tree/main/go/DS)--></li>
</ul>
<h1 id="线性表">线性表</h1>
<p>线性表是<strong>零或多个相同数据类型的有限序列</strong>。逻辑结构为线性结构，存储结构为顺序存储或链式存储，对应<a href="#顺序表">顺序表</a>或<a href="#链表">链表</a>。</p>
<p>线性表的抽象数据类型：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">ADT List</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Data</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Operation</span></span><br><span class="line"><span class="function">    <span class="title">InitList</span><span class="params">(&amp;L)</span></span>; <span class="comment">// 初始化</span></span><br><span class="line">    <span class="built_in">Empty</span>(L); <span class="comment">// 判断是否是空表</span></span><br><span class="line">    <span class="built_in">ListInsert</span>(&amp;L, i, e); <span class="comment">// 在第 i 个位置插入 e</span></span><br><span class="line">    <span class="built_in">ListDelete</span>(&amp;L, i, &amp;e); <span class="comment">// 删除第 i 个位置的数据并用 e 返回</span></span><br><span class="line">    <span class="built_in">LocateElem</span>(L, e); <span class="comment">// 按值查找</span></span><br><span class="line">    <span class="built_in">GetElem</span>(L, i); <span class="comment">// 按位查找</span></span><br><span class="line">    <span class="built_in">Length</span>(L); <span class="comment">// 求表长</span></span><br><span class="line">    <span class="built_in">PrintList</span>(L); <span class="comment">// 打印表</span></span><br><span class="line">    <span class="built_in">DestroyList</span>(&amp;L); <span class="comment">// 销毁表</span></span><br></pre></td></tr></table></figure>
<h2 id="顺序表">顺序表</h2>
<p>线性表的顺序表示指的是用一组地址连续的存储单元依次存储线性表的数据元素，这种存储结构称为顺序表。</p>
<h3 id="顺序表的定义和初始化">顺序表的定义和初始化</h3>
<p>地址连续的存储结构完全可以使用数组或者一个指向连续地址的指针来实现，故可以轻松写出顺序表的静态创建：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 定义顺序表 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Maxsize N <span class="comment">// N 为自定义的整数，表示顺序表的最大长度</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Sqlist</span> &#123;</span><br><span class="line">    ElemType data[Maxsize]; <span class="comment">// ElemType 为元素数据类型</span></span><br><span class="line">    <span class="type">int</span> length; <span class="comment">// 顺序表实际存储数据的长度</span></span><br><span class="line">&#125;;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/* 初始化顺序表*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitList</span> <span class="params">(<span class="keyword">struct</span> Sqlist &amp;List)</span> </span>&#123;</span><br><span class="line">    List.length = <span class="number">0</span>; <span class="comment">// 初始长度为0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; Maxsize; i++)</span><br><span class="line">        List.data[i] = <span class="number">0</span>; <span class="comment">// 避免脏数据</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/* 实例化顺序表 */</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Sqlist</span> L;</span><br><span class="line">    <span class="built_in">InitList</span>(L);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上定义的顺序表的最大长度为 Maxsize，若想顺序表的最大长度可变，则需动态创建：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 定义顺序表 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Initsize N <span class="comment">// 顺序表的初始最大长度</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Sqlist</span> &#123;</span><br><span class="line">    ElemType *data; <span class="comment">// 指向顺序表首地址</span></span><br><span class="line">    <span class="type">int</span> maxsize, length;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化顺序表 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitList</span><span class="params">(<span class="keyword">struct</span> Sqlist &amp;List)</span> </span>&#123;</span><br><span class="line">    List.maxsize = Initsize; <span class="comment">// 初始最大长度</span></span><br><span class="line">    List.length = <span class="number">0</span>; <span class="comment">// 初始长度为0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; List.maxsize; i++)</span><br><span class="line">        List.data[i] = <span class="number">0</span>; <span class="comment">// 避免脏数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 实例化顺序表 */</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Sqlist</span> L;</span><br><span class="line">    L.data = <span class="keyword">new</span> ElemType[Initsize];</span><br><span class="line">    <span class="built_in">InitList</span>(L);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="顺序表的基本操作">顺序表的基本操作</h3>
<p>插入（在表 L 的第 i 个位置插入 e）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListInsert</span><span class="params">(Sqlist &amp;L, <span class="type">int</span> i, ElemType e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L.length + <span class="number">1</span>) <span class="comment">// 超出表的实际长度</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (L.length == Maxsize) <span class="comment">// 表已达最大长度</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = L.length; j &gt;= i; j--)  <span class="comment">// 从第 i 个位置循环后移</span></span><br><span class="line">        L.data[j] = L.data[j - <span class="number">1</span>]; <span class="comment">// 赋值给后面的元素</span></span><br><span class="line">    L.data[i - <span class="number">1</span>] = e; <span class="comment">// 将第 i 个位置赋值为 e</span></span><br><span class="line">    L.length++; <span class="comment">// 实际长度加一</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>删除（删除表 L 的第 i 个元素并用 e 返回删除值）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListDelete</span><span class="params">(Sqlist &amp;L, <span class="type">int</span> i, ElemType &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L.length) <span class="comment">// 超出表的实际长度</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    e = L.data[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt;= L.length - <span class="number">1</span>; j++) <span class="comment">// 将第 i 个位置后的元素前移</span></span><br><span class="line">        L.data[j - <span class="number">1</span>] = L.data[j]; <span class="comment">// 赋值给前面的元素</span></span><br><span class="line">    L.data[L.length - <span class="number">1</span>] = <span class="number">0</span>; <span class="comment">// 将末尾的元素设为 0</span></span><br><span class="line">    L.length--; <span class="comment">// 实际长度减一</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>按值查找（表 L 中的第一次出现的 e 的位置）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">LocateElem</span><span class="params">(Sqlist &amp;L, ElemType e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L.length; i++)</span><br><span class="line">        <span class="keyword">if</span> (L.data[i] == e)</span><br><span class="line">            <span class="keyword">return</span> i + <span class="number">1</span>; <span class="comment">// 找到返回位置</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 未找到</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="链表">链表</h2>
<p>链表是一种非常非常非常重要的数据结构！</p>
<p>顺序表插入和删除需要移动大量的元素，链表通过指针将逻辑上相邻的元素连接起来，不需要在连续地址上存储。</p>
<h3 id="单链表">单链表</h3>
<p>单链表的每个结点除了要存储自身数据外还要存储指向后继元素的指针。</p>
<p>单链表必须有一个指向链表首地址的<strong>头指针</strong>，有两种定义方式，带头结点和不带头结点。不带头结点 的方式更直观但是不方便进行操作。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 定义结点 */</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LNode</span> &#123;</span><br><span class="line">    ElemType data; <span class="comment">// 自身数据</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LNode</span> *next; <span class="comment">// 指向下一个结点</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span> LNode, *LinkList; <span class="comment">// 结点，链表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 带头结点初始化 */</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InitList</span><span class="params">(LinkList &amp;List)</span> </span>&#123;</span><br><span class="line">    List = <span class="keyword">new</span> LNode;</span><br><span class="line">    <span class="keyword">if</span> (List == <span class="literal">NULL</span>) <span class="comment">// 创建失败</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    List-&gt;next = <span class="literal">NULL</span>; <span class="comment">// 初始为空表</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 判断是否为空 */</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Empty</span><span class="params">(LinkList &amp;List)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> List-&gt;next == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>单链表的基本操作</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 按位查找 */</span></span><br><span class="line"><span class="function">LNode *<span class="title">GetElem</span><span class="params">(LinkList &amp;List, <span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> List; <span class="comment">// 头结点</span></span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span>) <span class="comment">// 结点不存在</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    LNode *p = List;</span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; i &gt; <span class="number">0</span>) &#123; </span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 按值查找 */</span></span><br><span class="line"><span class="function">LNode *<span class="title">LocateElem</span><span class="params">(LinkList &amp;List, ElemType e)</span> </span>&#123;</span><br><span class="line">    LNode *p = List-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; p-&gt;data != e)</span><br><span class="line">        p-&gt;next;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 插入（后插） */</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListInsert</span><span class="params">(LinkList &amp;List, <span class="type">int</span> i, ElemType e)</span> </span>&#123;</span><br><span class="line">    LNode *p = <span class="built_in">GetElem</span>(List, i - <span class="number">1</span>); <span class="comment">// 找到前驱结点</span></span><br><span class="line">    <span class="keyword">if</span> (!p)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 在前驱结点后插入</span></span><br><span class="line">    LNode *s = <span class="keyword">new</span> LNode;</span><br><span class="line">    s-&gt;data = e;</span><br><span class="line">    s-&gt;next = p-&gt;next; </span><br><span class="line">    p-&gt;next = s;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 拓展：前插 */</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 先后插</span></span><br><span class="line">    s-&gt;next = p-&gt;next;</span><br><span class="line">    p-&gt;next = s;</span><br><span class="line">    <span class="comment">// 交换前后数据</span></span><br><span class="line">    temp = p-&gt;data;</span><br><span class="line">    p-&gt;data = s-&gt;data;</span><br><span class="line">    s-&gt;data = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除 */</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListDelete</span><span class="params">(LinkList &amp;List, <span class="type">int</span> i, ElemType &amp;e)</span> </span>&#123;</span><br><span class="line">    LNode *p = <span class="built_in">GetElem</span>(List, i - <span class="number">1</span>); <span class="comment">// 找到前驱结点 </span></span><br><span class="line">    <span class="keyword">if</span> (!p) </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    e = p-&gt;next-&gt;data;</span><br><span class="line">    p-&gt;next = p-&gt;next-&gt;next;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>单链表的整表创建和销毁</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 头插法 */</span></span><br><span class="line"><span class="function">LinkList <span class="title">List_HeadInsert</span><span class="params">(LinkList &amp;List)</span> </span>&#123;</span><br><span class="line">    LNode *s;</span><br><span class="line">    ElemType x;</span><br><span class="line">    List = <span class="keyword">new</span> LNode;</span><br><span class="line">    List-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (std::cin &gt;&gt; x &amp;&amp; x != <span class="number">9999</span>) &#123;</span><br><span class="line">        s = <span class="keyword">new</span> LNode;</span><br><span class="line">        s-&gt;data = x;</span><br><span class="line">        s-&gt;next = List-&gt;next;</span><br><span class="line">        List-&gt;next = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> List;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 尾插法 */</span></span><br><span class="line"><span class="function">LinkList <span class="title">List_TailInsert</span><span class="params">(LinkList &amp;List)</span> </span>&#123;</span><br><span class="line">    LNode *s, *r = List;</span><br><span class="line">    ElemType x;</span><br><span class="line">    List = <span class="keyword">new</span> LNode;</span><br><span class="line">    List-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (std::cin &gt;&gt; x &amp;&amp; x != <span class="number">9999</span>) &#123;</span><br><span class="line">        s = <span class="keyword">new</span> LNode;</span><br><span class="line">        s-&gt;data = x;</span><br><span class="line">        r-&gt;next = s;</span><br><span class="line">        r = s;</span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> List;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 销毁表 */</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DestroyList</span><span class="params">(LinkList &amp;List)</span> </span>&#123;</span><br><span class="line">    LNode *p;</span><br><span class="line">    <span class="keyword">while</span> (List) &#123;</span><br><span class="line">        p = List;</span><br><span class="line">        List = List-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">        p = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="静态链表">静态链表</h3>
<p>在早期的编程语言中没有指针、引用等机制，只能使用<strong>数组</strong>来代替指针，这样的链表内存固定，地址连续，称为静态链表。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 定义静态链表 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Maxsize N </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SLinkList</span> &#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="type">int</span> next; <span class="comment">// 下一个元素下标</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">SLinkList</span> SLinkList[Maxsize];</span><br></pre></td></tr></table></figure>
<h3 id="双向链表">双向链表</h3>
<p>每个结点除了存有数据和指向下一个结点的指针 next 外，还存有指向上一个结点的指针 prior。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 定义双向链表 */</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DNode</span> &#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">DNode</span> *next, *prior;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">DNode</span> DNode, *DLinkList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 插入（*p 后插入 *s） */</span></span><br><span class="line">&#123;</span><br><span class="line">    s-&gt;next = p-&gt;next;</span><br><span class="line">    p-&gt;next-&gt; prior = s;</span><br><span class="line">    s-&gt;prior = p;</span><br><span class="line">    p-&gt;next = s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除（删除 *p 后的 *q） */</span></span><br><span class="line">&#123;</span><br><span class="line">    p-&gt;next = q-&gt;next;</span><br><span class="line">    p-&gt;next-&gt;prior = p;</span><br><span class="line">    <span class="keyword">delete</span> q;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="循环链表">循环链表</h3>
<p>一种特殊的链表，即末尾结点 *r 的 next 指针指向头结点 <code>r-&gt;next = L</code>，好处是可以快速的找到尾结点而不用遍历表，如果是循环双链表还需要 <code>L-&gt;prior = r</code>。</p>
<h2 id="顺序表和链表的比较">顺序表和链表的比较</h2>
<ol type="1">
<li>顺序表随机存取/读写，链表只能顺序存取/读写。</li>
<li>顺序表逻辑相邻的元素存储位置也相邻。</li>
<li>链表分配内存空间灵活高效。</li>
<li>链表的插入和删除更高效。</li>
<li>顺序表插入和删除需要移动大量的元素。</li>
</ol>
<h1 id="栈队列和数组">栈、队列和数组</h1>
<p>栈和队列都是特殊的线性表，对数据的插入和删除操作有特殊的规定，使得数据的进出策略有所不同。</p>
<h2 id="栈">栈</h2>
<p><strong>栈（Stack）</strong>是只允许在一端进行插入或删除操作的线性表。</p>
<p>允许插入或删除的一端称为<strong>栈顶（Top）</strong>，另一端称为<strong>栈底（Bottom）</strong>，由于只允许一端进行插入或删除，栈的数据进出策略简单概括为<strong>后进先出（Last In First Out, LIFO）</strong>。</p>
<blockquote>
<p>n 个不同元素进栈，出栈元素有 <span class="math inline">\(\frac{1}{n+1}C_{2n}^{n}\)</span> 种不同排列。</p>
</blockquote>
<h3 id="顺序栈">顺序栈</h3>
<p>使用顺序结构存储栈元素的栈。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> Initsize 20 <span class="comment">// Initial Size 初始容量</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">SeqStack</span> &#123;</span><br><span class="line">    <span class="type">int</span> *data;</span><br><span class="line">    <span class="type">int</span> top, maxsize;</span><br><span class="line">&#125; sqstack;</span><br></pre></td></tr></table></figure>
<p>基本操作</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Initialize Sequential Stack 初始化顺序结构栈 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitStack</span><span class="params">(sqstack &amp;S)</span> </span>&#123;</span><br><span class="line">    S.maxsize = Initsize;</span><br><span class="line">    S.data = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>) * S.maxsize);</span><br><span class="line">    S.top = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Empty</span><span class="params">(sqstack S)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> S.top == <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Extend Size of Stack 扩充栈容量 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ExtendStack</span><span class="params">(sqstack &amp;S, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> *p = S.data; <span class="comment">// p 指向原地址</span></span><br><span class="line">    S.maxsize += n; <span class="comment">// 扩容</span></span><br><span class="line">    S.data = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>) * S.maxsize); <span class="comment">// 开辟新地址</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= S.top; i++)</span><br><span class="line">        S.data[i] = p[i];</span><br><span class="line">    <span class="built_in">free</span>(p); <span class="comment">// 释放原地址</span></span><br><span class="line">    p = <span class="literal">NULL</span>; <span class="comment">// p 置空</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Push Element 元素入栈 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(sqstack &amp;S, <span class="type">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.top + <span class="number">1</span> == S.maxsize)</span><br><span class="line">        <span class="built_in">ExtendStack</span>(S, <span class="number">1</span>);</span><br><span class="line">    S.data[++S.top] = e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Pop Element 元素出栈 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Pop</span><span class="params">(sqstack &amp;S, <span class="type">int</span> &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Empty</span>(S)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Empty Stack!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    e = S.data[S.top--];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Print Sequential Stack 打印顺序结构栈 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintStack</span><span class="params">(sqstack S)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Empty</span>(S)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Empty Stack!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= S.top; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, S.data[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Destroy Sequential Stack 销毁顺序结构栈 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DestroyStack</span><span class="params">(sqstack *S)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!S)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">free</span>(S-&gt;data); <span class="comment">// 释放数组内存</span></span><br><span class="line">    S-&gt;data = <span class="literal">NULL</span>; <span class="comment">// 指针置空</span></span><br><span class="line">    S-&gt;top = <span class="number">-1</span>;</span><br><span class="line">    S-&gt;maxsize = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="链式栈">链式栈</h3>
<p>使用链式结构存储栈元素的栈。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LNode</span> *next; </span><br><span class="line">&#125; LNode, *linkstack;</span><br></pre></td></tr></table></figure>
<p>基本操作</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Initialize Link Stack 初始化链式结构栈 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitStack</span><span class="params">(linkstack &amp;S)</span> </span>&#123;</span><br><span class="line">    S = (lnode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(lnode));</span><br><span class="line">    <span class="keyword">if</span> (S == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Fail To Init!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    S-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Empty</span><span class="params">(linkstack S)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> S-&gt;next == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(linkstack &amp;S, <span class="type">int</span> e)</span> </span>&#123;</span><br><span class="line">    lnode *p = (lnode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(lnode)); <span class="comment">// 开辟新结点作为栈顶</span></span><br><span class="line">    p-&gt;data = e;</span><br><span class="line">    p-&gt;next = S-&gt;next;</span><br><span class="line">    S-&gt;next = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Pop</span><span class="params">(linkstack &amp;S, <span class="type">int</span> &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Empty</span>(S)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Empty Stack!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    lnode *p = S-&gt;next; <span class="comment">// p 指向栈顶</span></span><br><span class="line">    e = p-&gt;data;</span><br><span class="line">    S-&gt;next = p-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(p); <span class="comment">// 释放该结点内存</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Print Link Stack 打印链式结构栈 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintStack</span><span class="params">(linkstack S)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Empty</span>(S)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Empty List!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    lnode *p = S-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, p-&gt;data);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Destroy Link Stack 销毁链式结构栈 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DestroyStack</span><span class="params">(linkstack &amp;S)</span> </span>&#123;</span><br><span class="line">    lnode *p;</span><br><span class="line">    <span class="keyword">while</span> (S) &#123;</span><br><span class="line">        p = S;</span><br><span class="line">        S = S-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(p); <span class="comment">// 释放该结点内存 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="队列">队列</h2>
<p><strong>队列（Queue）</strong>也是一种操作受限制的先行表，只允许在表的一端进行插入，在表的另一端进行删除。</p>
<p>向队列插入元素的操作称为入队或进队，删除元素的操作称为出队。允许删除数据的一端称为<strong>队头（Front）</strong>，允许插入元素的一端称为<strong>队尾（Rear）</strong>。其数据的进出策略可以简单概括为<strong>先进先出（First In First Out, FIFO）</strong>。</p>
<h3 id="顺序队列循环队列">顺序队列（循环队列）</h3>
<p>使用顺序结构存储队列元素的循环队列。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> Initsize 20 <span class="comment">// Initial Size 初始容量</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">SeqQueue</span> &#123;</span><br><span class="line">    <span class="type">int</span> *data;</span><br><span class="line">    <span class="type">int</span> front, rear, maxsize;</span><br><span class="line">&#125; sqqueue;</span><br></pre></td></tr></table></figure>
<p>基本操作</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Initialize Sequential Queue 初始化顺序结构循环队列 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitQueue</span><span class="params">(sqqueue &amp;Q)</span> </span>&#123;</span><br><span class="line">    Q.maxsize = Initsize;</span><br><span class="line">    Q.data = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>) * Q.maxsize);</span><br><span class="line">    Q.rear = Q.front = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; Q.maxsize; i++)</span><br><span class="line">        Q.data[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Empty</span><span class="params">(sqqueue Q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Q.rear == Q.front;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Extend Size of Queue 扩充循环队列的容量 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ExtendQueue</span><span class="params">(sqqueue &amp;Q, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> *p = Q.data; <span class="comment">// p 指向原地址</span></span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    j = Q.maxsize;</span><br><span class="line">    Q.maxsize += n; <span class="comment">// 扩容</span></span><br><span class="line">    Q.data = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>) * Q.maxsize); <span class="comment">// 开辟新地址</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; (Q.rear + j - Q.front) % j; i++)</span><br><span class="line">        Q.data[i] = p[(Q.front + i) % j];</span><br><span class="line">    <span class="built_in">free</span>(p); <span class="comment">// 释放原地址</span></span><br><span class="line">    p = <span class="literal">NULL</span>; <span class="comment">// p 置空</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Element Enter Queue 元素进入队列 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">EnterQueue</span><span class="params">(sqqueue &amp;Q, <span class="type">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((Q.rear + <span class="number">1</span>) % Q.maxsize == Q.front)</span><br><span class="line">        <span class="built_in">ExtendQueue</span>(Q, <span class="number">1</span>);</span><br><span class="line">    Q.data[Q.rear] = e;</span><br><span class="line">    Q.rear = (Q.rear + <span class="number">1</span>) % Q.maxsize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Element Exit Queue 元素退出队列 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ExitQueue</span><span class="params">(sqqueue &amp;Q, <span class="type">int</span> &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Empty</span>(Q)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Empty Queue!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    e = Q.data[Q.front];</span><br><span class="line">    Q.front = (Q.front + <span class="number">1</span>) % Q.maxsize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Print Sequential Queue 打印顺序结构循环队列 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintQueue</span><span class="params">(sqqueue Q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Empty</span>(Q)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Empty Queue!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (Q.rear + Q.maxsize - Q.front) % Q.maxsize; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, Q.data[(Q.front + i) % Q.maxsize]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Destroy Sequential Queue 销毁顺序结构循环队列 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DestroyQueue</span><span class="params">(sqqueue *Q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!Q)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">free</span>(Q-&gt;data); <span class="comment">// 释放数组的内存</span></span><br><span class="line">    Q-&gt;data = <span class="literal">NULL</span>; <span class="comment">// 指针置空</span></span><br><span class="line">    Q-&gt;rear = Q-&gt;front = <span class="number">0</span>;</span><br><span class="line">    Q-&gt;maxsize = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="链式队列">链式队列</h3>
<p>使用链式结构存储队列元素的队列。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LNode</span> *next; </span><br><span class="line">&#125; lnode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LinkQueue</span> &#123;</span><br><span class="line">    lnode *front;</span><br><span class="line">    lnode *rear;</span><br><span class="line">&#125; linkqueue;</span><br></pre></td></tr></table></figure>
<p>基本操作</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Initialize Link Queue 初始化链式结构队列 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitQueue</span><span class="params">(linkqueue &amp;Q)</span> </span>&#123;</span><br><span class="line">    Q.front = Q.rear = (lnode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(lnode));</span><br><span class="line">    Q.front-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Empty</span><span class="params">(linkqueue Q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Q.front == Q.rear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Elements Enter Queue 元素入队 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">EnterQueue</span><span class="params">(linkqueue &amp;Q, <span class="type">int</span> e)</span> </span>&#123;</span><br><span class="line">    lnode *s = (lnode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(lnode));</span><br><span class="line">    s-&gt;data = e;</span><br><span class="line">    s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    Q.rear-&gt;next = s;</span><br><span class="line">    Q.rear = s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Element Exit Queue 元素出队 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ExitQueue</span><span class="params">(linkqueue &amp;Q, <span class="type">int</span> &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Empty</span>(Q)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Empty Queue!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    lnode *p = Q.front-&gt;next; <span class="comment">// p 指向要删除的结点</span></span><br><span class="line">    e = Q.front-&gt;data;</span><br><span class="line">    Q.front-&gt;next = p-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (p ==  Q.rear) <span class="comment">// 若 p 等于尾结点，则队列置空</span></span><br><span class="line">        Q.rear = Q.front;</span><br><span class="line">    <span class="built_in">free</span>(p); <span class="comment">// 释放该结点内存</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Print Link Queue 打印链式结构队列 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintQueue</span><span class="params">(linkqueue Q)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Destroy Link Queue 销毁链式结构队列 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DestroyQueue</span><span class="params">(linkqueue &amp;Q)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="双端队列">双端队列</h3>
<p>将队列的两端称作前端和后端，两端都可以进行入队和出队操作的队列。</p>
<ul>
<li><p>输入受限的双端队列</p></li>
<li><p>输出受限的双端队列</p></li>
</ul>
<h2 id="栈和队列的应用">栈和队列的应用</h2>
<h3 id="栈_括号匹配">栈_括号匹配</h3>
<h3 id="栈_表达式">栈_表达式</h3>
<h3 id="栈_递归函数调用">栈_递归函数调用</h3>
<h3 id="队列_层次遍历">队列_层次遍历</h3>
<h3 id="队列_计算机系统">队列_计算机系统</h3>
<h2 id="数组_矩阵的压缩存储">数组_矩阵的压缩存储</h2>
<h3 id="对称矩阵">对称矩阵</h3>
<h3 id="三角矩阵">三角矩阵</h3>
<h3 id="三对角矩阵">三对角矩阵</h3>
<h3 id="稀疏矩阵">稀疏矩阵</h3>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构_绪论</title>
    <url>/2022/03/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_%E7%BB%AA%E8%AE%BA/</url>
    <content><![CDATA[<p>数据结构与算法的入门概念</p>
<hr>
<span id="more"></span>
<p><strong>本文索引</strong></p>
<ul>
<li><a href="#数据结构">数据结构</a>
<ul>
<li><a href="#基本概念">基本概念</a></li>
<li><a href="#逻辑结构数据元素之间的相互关系">逻辑结构：数据元素之间的相互关系</a></li>
<li><a href="#数据运算">数据运算</a></li>
<li><a href="#数据的物理结构">数据的物理结构</a></li>
<li><a href="#抽象数据类型">抽象数据类型</a></li>
</ul></li>
<li><a href="#算法">算法</a></li>
<li><a href="#算法效率的度量">算法效率的度量</a>
<ul>
<li><a href="#算法的时间复杂度">算法的时间复杂度</a></li>
<li><a href="#算法的空间复杂度">算法的空间复杂度</a></li>
</ul></li>
</ul>
<hr>
<blockquote>
<p>Preface:</p>
<ol type="1">
<li><p>本篇所有代码均由 C++ 实现</p></li>
<li>参考文献：</li>
</ol>
<ul>
<li>大话数据结构（程杰）</li>
<li>数据结构考研指导（王道论坛）</li>
</ul>
</blockquote>
<h1 id="数据结构">数据结构</h1>
<h2 id="基本概念">基本概念</h2>
<p>数据：描述客观事物的符号，计算机的可操作对象，是一个整体的概念。</p>
<p><strong>数据元素</strong>：组成数据的基本单位，如数组的一项。</p>
<p>数据对象：相同性质的数据元素的集合，是数据的子集合。</p>
<p>数据项：数据不可分割的最小单位。</p>
<p><strong>数据结构（data structure）</strong>：相互之间存在一种或多种特定关系的数据元素的集合。</p>
<p>四者关系可以如此表示：</p>
<p><img src="1.png" /></p>
<h2 id="逻辑结构数据元素之间的相互关系">逻辑结构：数据元素之间的相互关系</h2>
<p><strong>集合结构</strong><br />
数据元素除了同属一个集合外没有其他关系。</p>
<p><strong>线性结构</strong><br />
数据元素是一对一关系，除第一个元素外均有唯一前驱，除最后一个元素外均有唯一后继。</p>
<p><strong>树形结构</strong><br />
数据元素是一对多关系，有唯一的前驱和多个后继。</p>
<p><strong>图装结构</strong><br />
数据元素是多对多关系。</p>
<h2 id="数据运算">数据运算</h2>
<p>数据的查找、插入和删除等操作。</p>
<h2 id="数据的物理结构">数据的物理结构</h2>
<p>数据的存储结构影响着数据运算的效率和可行性。</p>
<blockquote>
<p>此部分知识在<a href="操作系统_文件管理.md">操作系统_文件管理</a>章节有详细说明。</p>
</blockquote>
<p>顺序存储：数据元素存放在连续的存储单元中。</p>
<p>非顺序存储：链式存储、索引存储、散列存储。</p>
<h2 id="抽象数据类型">抽象数据类型</h2>
<p>抽象数据类型（abstract data type，ADT）是数学的抽象、对实现原理的抽象，即使用者只关心数据对象和相关的操作 <strong>“是什么”</strong>，而不关心 <strong>“如何实现”</strong>。</p>
<p>如 C语言中的结构体（struct）、C++/Java/Python 中的类（class）等。</p>
<p>换言之，对于一门计算机语言来说，只要不是基本数据类型，即为抽象数据类型。</p>
<blockquote>
<p>拓展：同样采取抽象思想的还有应用程序接口（application programming interface，API）。</p>
</blockquote>
<h1 id="算法">算法</h1>
<p>算法（algorithm）是处理问题的方法、步骤，不仅涉及计算机科学，在计算机中是由程序实现，如函数、方法、类或是整个程序框架。</p>
<p>算法的特性：有穷性、可行性、确定性。</p>
<p>算法设计的要求：正确性、可读性、健壮性、时间效率高和存储量低。</p>
<h1 id="算法效率的度量">算法效率的度量</h1>
<h2 id="算法的时间复杂度">算法的时间复杂度</h2>
<p>算法的时间复杂度即事先预估算法的时间开销与问题规模 n 的关系。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>; <span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= n) &#123; <span class="comment">// n+1</span></span><br><span class="line">        i++; <span class="comment">// n</span></span><br><span class="line">        std::cout &lt;&lt; “Hello”; <span class="comment">// n</span></span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; “World\n”; <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述程序的时间复杂度为 T(n) = 3n+3.</p>
<p><strong>大O表示法</strong><br />
上限表示法，即算法在最坏的情况下的时间复杂度。</p>
<p><span class="math display">\[
T(n)=O(f(n)) \Leftrightarrow \lim_{n \to \infty} \frac{T(n)}{f(n)}=c(c\text{为常数}).
\]</span></p>
<p>故上述算法的时间复杂度为 T(n) = O(n).</p>
<p>常见算法的时间复杂度（从小到达排列）:</p>
<p><span class="math display">\[
O(1)&lt;O(log_2n)&lt;O(n)&lt;O(n^2)&lt;O(n^3)&lt;O(2^n)&lt;O(n!)&lt;O(n^n).
\]</span></p>
<p>算法的时间复杂度相加，只保留最高阶的项。</p>
<p><span class="math display">\[
T(n)=T_1(n)+T_2(n)=O(f(n))+O(g(n))=O(max(f(n),g(n)))
\]</span></p>
<h2 id="算法的空间复杂度">算法的空间复杂度</h2>
<p>程序的指令和数据存储在内存中，算法的空间复杂度即为程序占内存的大小与问题规模 n 的关系。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> array[n]; <span class="comment">// n Byte</span></span><br><span class="line">    <span class="type">int</span> i; <span class="comment">// 4 Byte</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上代码的空间复杂度为 S(n) = n+1，同样使用大O表示法，则 S(n) = O(n).</p>
<p>递归函数调用的内存开销：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i, j; <span class="comment">// 8 Byte</span></span><br><span class="line">    <span class="built_in">func</span>(n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">// 函数递归调用 n 次</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该函数递归调用 n 次，每次在内存中增加两个 int 型变量，故 S(n) = O(n).</p>
<p>若将程序改为：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> array[n]; <span class="comment">// n Byte</span></span><br><span class="line">    <span class="built_in">func</span>(n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">// 函数递归调用 n 次</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>则函数每次调用需在内存中增加一个 int 型数组，从 n 到 1 数组的长度分别为 n, n-1, … , 1，则总的长度为 <span class="math inline">\(\frac{1}{2}(n^2+n)\)</span>，故 S(n) = O(n<sup>2</sup>).</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>高等数学_一元函数微分学</title>
    <url>/2022/03/01/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6_%E4%B8%80%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6/</url>
    <content><![CDATA[<p>高等数学<strong>一元函数微分学</strong>的知识总结<br />
内容包括：</p>
<ol type="1">
<li>导数和微分的概念</li>
<li>各种求导数的方法</li>
<li>导数的应用</li>
<li>微分中值定理及其应用</li>
<li>零点问题与微分不等式
<hr>
<span id="more"></span></li>
</ol>
<p><strong>本文索引</strong></p>
<ul>
<li><a href="#导数与微分">导数与微分</a>
<ul>
<li><a href="#导数的定义">导数的定义</a></li>
<li><a href="#导函数">导函数</a></li>
<li><a href="#微分的定义">微分的定义</a></li>
<li><a href="#求导数的方法">求导数的方法</a>
<ul>
<li><a href="#基本公式求导法">基本公式求导法</a></li>
<li><a href="#导数的四则运算法则">导数的四则运算法则</a></li>
<li><a href="#复合函数的求导法">复合函数的求导法</a></li>
<li><a href="#反函数的导数法">反函数的导数法</a></li>
<li><a href="#对数求导法">对数求导法</a></li>
<li><a href="#幂指函数求导法">幂指函数求导法</a></li>
<li><a href="#变限积分求导法">变限积分求导法</a></li>
</ul></li>
<li><a href="#特殊函数的求导">特殊函数的求导</a>
<ul>
<li><a href="#分段函数求导">分段函数求导</a></li>
<li><a href="#隐函数求导">隐函数求导</a></li>
<li><a href="#参数方程求导">参数方程求导</a></li>
<li><a href="#高阶导数">高阶导数</a></li>
</ul></li>
<li><a href="#导数的应用">导数的应用</a>
<ul>
<li><a href="#单调性与极值点">单调性与极值点</a></li>
<li><a href="#凹凸性与拐点">凹凸性与拐点</a></li>
<li><a href="#渐近线">渐近线</a></li>
<li><a href="#求最值或取值范围">求最值或取值范围</a></li>
</ul></li>
</ul></li>
<li><a href="#微分中值定理">微分中值定理</a>
<ul>
<li><a href="#微分中值定理及其推导">微分中值定理及其推导</a>
<ul>
<li><a href="#费马引理">费马引理</a></li>
<li><a href="#罗尔定理">罗尔定理</a></li>
<li><a href="#拉格朗日中值定理">拉格朗日中值定理</a></li>
<li><a href="#柯西中值定理">柯西中值定理</a></li>
<li><a href="#泰勒中值定理">泰勒中值定理</a></li>
<li><a href="#洛必达法则">洛必达法则</a></li>
</ul></li>
<li><a href="#微分中值定理的应用">微分中值定理的应用</a></li>
</ul></li>
<li><a href="#零点问题与微分不等式">零点问题与微分不等式</a></li>
</ul>
<hr>
<h1 id="导数与微分">导数与微分</h1>
<h2 id="导数的定义">导数的定义</h2>
<p>若 <span class="math inline">\(y = f(x)\)</span> 在 <span class="math inline">\(x_0\)</span> 的某一邻域内有定义，当 <span class="math inline">\(x\)</span> 有增量 <span class="math inline">\(\Delta x\)</span> 时相应的 <span class="math inline">\(y\)</span> 有增量 <span class="math inline">\(\Delta y=f(x_0+\Delta x)-f(x_0)\)</span>，当 <span class="math inline">\(\Delta x \to 0\)</span> 时，</p>
<p><span class="math display">\[\lim_{\Delta x \to 0} \frac{\Delta y}{\Delta x} = \lim_{\Delta x \to 0} \frac{f(x_0+\Delta x)-f(x_0)}{\Delta x}.\]</span></p>
<p>若该极限存在，则<strong>极限值</strong>称为 <span class="math inline">\(y = f(x)\)</span> 在 <span class="math inline">\(x_0\)</span> 处的导数并说该函数在 <span class="math inline">\(x_0\)</span> 处可导，导数记为 <span class="math inline">\(f’(x_0)\)</span>，</p>
<p><span class="math display">\[f’(x_0) = \lim_{\Delta x \to 0} \frac{\Delta y}{\Delta x} = \lim_{\Delta x \to 0} \frac{f(x_0+\Delta x)-f(x_0)}{\Delta x} = \lim_{x \to x_0} \frac{f(x)-f(x_0)}{x-x_0}.\]</span></p>
<p><strong>注意：</strong></p>
<ul>
<li><p>导数的本质是一种<strong>极限</strong>，存在的充要条件是左右极限都存在且相等。</p>
<blockquote>
<p>当 <span class="math inline">\(\Delta x \to 0^{-}\)</span> 时，<span class="math inline">\(\lim \frac{\Delta y}{\Delta x}\)</span> 为左导数 <span class="math inline">\(f_{-}’(x_0)\)</span>，反之为右导数 <span class="math inline">\(f_{+}’(x_0)\)</span>.</p>
</blockquote></li>
<li>导数的几何意义为函数所表示的曲线上某一点的切线斜率。</li>
<li><p>函数在某处可导，则必然在此处连续。<strong>反之未必</strong>。</p>
<blockquote>
<p><strong>证</strong><br />
设 <span class="math inline">\(y=f(x)\)</span> 在 <span class="math inline">\(x_0\)</span> 处的导数为 A，则<br />
<span class="math inline">\(\lim_{\Delta x \to 0} \frac{f(x_0+\Delta x)-f(x_0)}{\Delta x} = A\)</span>，<br />
当 <span class="math inline">\(\Delta x \to 0\)</span> 时，<br />
<span class="math inline">\(\Delta y = f(x_0+\Delta x)-f(x_0) = A\Delta x+o(|\Delta x |)\)</span>，<br />
显然 <span class="math inline">\(\Delta y \to 0\)</span>，即函数在 <span class="math inline">\(x_0\)</span> 处连续。<br />
反之不成立的例子：<span class="math inline">\(y = |x|\)</span>，<span class="math inline">\(y = x\sin(x)\)</span>.</p>
</blockquote></li>
</ul>
<h2 id="导函数">导函数</h2>
<p><span class="math inline">\(y = f(x)\)</span>，<span class="math inline">\(x\in D\)</span>，<span class="math inline">\(f’(x_0)\)</span> 为函数在 <span class="math inline">\(x_0\)</span> 处的导数，则 <span class="math inline">\(y = f’(x)\)</span>，<span class="math inline">\(x \in D\)</span> 为该函数的导函数。</p>
<ul>
<li>达布定理：<br />
若 <span class="math inline">\(y=f(x)\)</span> 在 <span class="math inline">\([a,b]\)</span> <strong>可导</strong>（无需导函数连续）， <span class="math inline">\(f’(a) \ne f’(b)\)</span>，则 <span class="math inline">\(\forall \mu\)</span> 位于 <span class="math inline">\(f’(a)\)</span> 和 <span class="math inline">\(f’(b)\)</span> 之间，都 <span class="math inline">\(\exists \xi \in [a,b]\)</span>，使得 <span class="math inline">\(f’(\xi)=\mu\)</span>.</li>
<li>导函数无第一类间断点，若 <span class="math inline">\(y=f(x)\)</span> 可导，则 <span class="math inline">\(f’(x)\)</span> <strong>连续或存在振荡间断点</strong>。</li>
</ul>
<h2 id="微分的定义">微分的定义</h2>
<p><span class="math inline">\(y’|x=x_0=f’(x_0)\)</span></p>
<h2 id="求导数的方法">求导数的方法</h2>
<h3 id="基本公式求导法">基本公式求导法</h3>
<h3 id="导数的四则运算法则">导数的四则运算法则</h3>
<h3 id="复合函数的求导法">复合函数的求导法</h3>
<h3 id="反函数的导数法">反函数的导数法</h3>
<h3 id="对数求导法">对数求导法</h3>
<h3 id="幂指函数求导法">幂指函数求导法</h3>
<h3 id="变限积分求导法">变限积分求导法</h3>
<h2 id="特殊函数的求导">特殊函数的求导</h2>
<h3 id="分段函数求导">分段函数求导</h3>
<h3 id="隐函数求导">隐函数求导</h3>
<h3 id="参数方程求导">参数方程求导</h3>
<h3 id="高阶导数">高阶导数</h3>
<h2 id="导数的应用">导数的应用</h2>
<h3 id="单调性与极值点">单调性与极值点</h3>
<h3 id="凹凸性与拐点">凹凸性与拐点</h3>
<h3 id="渐近线">渐近线</h3>
<h3 id="求最值或取值范围">求最值或取值范围</h3>
<h1 id="微分中值定理">微分中值定理</h1>
<h2 id="微分中值定理及其推导">微分中值定理及其推导</h2>
<h3 id="费马引理">费马引理</h3>
<p><span class="math inline">\(y=f(x)\)</span> 在某领域 <span class="math inline">\(\text{U}(\xi)\)</span> 有定义且在 <span class="math inline">\(\xi\)</span> 处可导，若 <span class="math inline">\(\forall x \in \text{U}(\xi)\)</span>，都有</p>
<p><span class="math display">\[f(x) \ge f(\xi)(\text{或} f(x) \le f(\xi))，\]</span></p>
<p>则 <span class="math inline">\(f’(\xi)=0\)</span>.<br />
即若 <span class="math inline">\(x_0\)</span> 为 <span class="math inline">\(f(x)\)</span> 的一个极值点，且 <span class="math inline">\(f’(x_0)\)</span> 存在，则 <span class="math inline">\(f’(x_0)=0\)</span>.</p>
<blockquote>
<p><strong>证</strong><br />
不妨设 <span class="math inline">\(x_0\)</span> 为 <span class="math inline">\(f(x)\)</span> 的一个极大值点，则 <span class="math inline">\(\forall x \in \text{U}(x_0)\)</span>，都有 <span class="math inline">\(\Delta y=f(x)-f(x_0) \le 0\)</span>，则<br />
<span class="math inline">\(f_-’(x_0)=\lim_{x \to x_0^-} \frac{f(x)-f(x_0)}{x-x_0} \ge 0\)</span>，<br />
<span class="math inline">\(f_+’(x_0)=\lim_{x \to x_0^+} \frac{f(x)-f(x_0)}{x-x_0} \le 0\)</span>，<br /> 又 <span class="math inline">\(f’(x_0)\)</span> 存在，故 <span class="math inline">\(f_-’(x_0)=f_+’(x_0)=0\)</span>.</p>
</blockquote>
<p><strong>推论</strong><br />
若 <span class="math inline">\(x=a\)</span> 为 <span class="math inline">\(f(x)\)</span> 的一个极值点，则 <span class="math inline">\(f’(a)=0\)</span> 或不存在。</p>
<h3 id="罗尔定理">罗尔定理</h3>
<p>若 <span class="math inline">\(y=f(x)\)</span> 满足</p>
<ol type="1">
<li>在 <span class="math inline">\([a,b]\)</span> 上连续</li>
<li>在 <span class="math inline">\((a,b)\)</span> 上可导</li>
<li><span class="math inline">\(f(a)=f(b)\)</span></li>
</ol>
<p>则 <span class="math display">\[\exists \xi \in (a,b)，\text{使得}f’(\xi)=0.\]</span></p>
<blockquote>
<p><strong>证</strong><br />
<span class="math inline">\(y=f(x)\)</span> 在 <span class="math inline">\([a,b]\)</span> 连续，由最大值最小值定理可知 <span class="math inline">\(f(x)\)</span> 在 <span class="math inline">\([a,b]\)</span> 内存在最大值最小值，<br />
设 M 为最大值，m 为最小值<br />
若 M = m，</p>
<blockquote>
<p>即 <span class="math inline">\(f(x)\)</span> 为常函数，则 <span class="math inline">\(f’(x)=0\)</span>.</p>
</blockquote>
<p>若 m &lt; M，</p>
<blockquote>
<p>因为 <span class="math inline">\(f(a)=f(b)\)</span>，<br />
故 m、M 至少有一点在 <span class="math inline">\((a,b)\)</span> 内取得，<br />
不妨设 <span class="math inline">\(\xi \in (a,b)\)</span>，使得 <span class="math inline">\(f(\xi)=M\)</span>，<br />
由费马引理，<span class="math inline">\(f’(\xi)=0\)</span>.</p>
</blockquote>
<p>得证。</p>
</blockquote>
<p><strong>推论</strong></p>
<h3 id="拉格朗日中值定理">拉格朗日中值定理</h3>
<p>若 <span class="math inline">\(y=f(x)\)</span> 满足</p>
<ol type="1">
<li>在 <span class="math inline">\([a,b]\)</span> 上连续</li>
<li>在 <span class="math inline">\((a,b)\)</span> 上可导</li>
</ol>
<p>则 <span class="math inline">\(\exists \xi \in (a,b)\)</span>，使得 <span class="math display">\[f(b)-f(a)=f’(\xi)(b-a)，\]</span> 或写成 <span class="math display">\[f’(\xi)= \frac{f(b)-f(a)}{b-a}.\]</span></p>
<blockquote>
<p><strong>证</strong></p>
</blockquote>
<h3 id="柯西中值定理">柯西中值定理</h3>
<p>若函数 <span class="math inline">\(f(x)\)</span> 和 <span class="math inline">\(g(x)\)</span> 满足</p>
<ol type="1">
<li>在 <span class="math inline">\([a,b]\)</span> 上连续<br />
</li>
<li>在 <span class="math inline">\((a,b)\)</span> 上可导</li>
<li><span class="math inline">\(g’(x) \ne 0\)</span></li>
</ol>
<p>则 <span class="math inline">\(\exists \xi \in (a,b)\)</span>，使得 <span class="math display">\[\frac{f(b)-f(a)}{g(b)-g(a)}=\frac{f’(\xi)}{g’(\xi)}.\]</span></p>
<blockquote>
<p><strong>证</strong></p>
</blockquote>
<h3 id="泰勒中值定理">泰勒中值定理</h3>
<p>若 <span class="math inline">\(y=f(x)\)</span> 在 <span class="math inline">\(x_0\)</span> 处可导，当 <span class="math inline">\(x \to x_0\)</span> 时 <span class="math display">\[f(x)-f(x_0)=f’(x_0)(x-x_0)+o(x-x_0)，\]</span> 即 <span class="math display">\[f(x)=f(x_0)+f’(x_0)(x-x_0)+o(x-x_0).\]</span> 更加一般的，若 <span class="math inline">\(f(x)\)</span> 在 <span class="math inline">\((a,b)\)</span> 上具有 n+1 阶导数，<span class="math inline">\(x_0 \in (a,b)\)</span>，则 <span class="math display">\[\begin{aligned}
&amp;f(x) = f(x_0)+f’(x_0)(x-x_0)+\frac{f’’(x_0)(x-x_0)^2}{2!}+…\\
&amp;+\frac{f^{(n)}(x_0)(x-x_0)^n}{n!}+\frac{f^{(n+1)}(\xi)(x-x_0)^{n+1}}{(n+1)!}(\text{拉格朗日余项}).
\end{aligned}\]</span> 其中 <span class="math inline">\(\xi\)</span> 位于 <span class="math inline">\(x\)</span> 与 <span class="math inline">\(x_0\)</span> 之间。<br />
另一种写法为，若 <span class="math inline">\(f(x)\)</span> 在 <span class="math inline">\(x_0\)</span> 处 n 阶导数存在，则存在一领域 <span class="math inline">\(\text{U}(x_0)\)</span>，对于 <span class="math inline">\(\forall x \in \text{U}(x_0)\)</span>，有 <span class="math display">\[\begin{aligned}
&amp;f(x) = f(x_0)+f’(x_0)(x-x_0)+\frac{f’’(x_0)(x-x_0)^2}{2!}+…\\
&amp;+\frac{f^{(n)}(x_0)(x-x_0)^n}{n!}+o((x-x_0)^n)(\text{佩亚诺余项}).
\end{aligned}\]</span> 当 <span class="math inline">\(x_0=0\)</span> 时，泰勒公式称为<strong>麦克劳林公式</strong>，几个重要麦克劳林公式 <span class="math display">\[
\begin{aligned}
&amp;(1)  \mathrm{e}^{x}=1+x+\frac{1}{2 !} x^{2}+\cdots+\frac{1}{n !} x^{n}+o\left(x^{n}\right) .\\
&amp;(2)  \sin x=x-\frac{x^{3}}{3 !}+\cdots+(-1)^{n} \frac{x^{2 n+1}}{(2 n+1) !}+o\left(x^{2 n+1}\right) .\\
&amp;(3)  \cos x=1-\frac{x^{2}}{2 !}+\frac{x^{4}}{4 !}-\cdots+(-1)^{n} \frac{x^{2 n}}{(2 n) !}+o\left(x^{2 n}\right) .\\
&amp;(4)  \frac{1}{1-x}=1+x+x^{2}+\cdots+x^{n}+o\left(x^{n}\right) .\\
&amp;(5)  \frac{1}{1+x}=1-x+x^{2}-\cdots+(-1)^{n} x^{n}+o\left(x^{n}\right) .\\
&amp;(6)  \ln (1+x)=x-\frac{x^{2}}{2}+\frac{x^{3}}{3}-\cdots+(-1)^{n-1} \frac{x^{n}}{n}+o\left(x^{n}\right) .\\
&amp;(7)  (1+x)^{\alpha}=1+\alpha x+\frac{\alpha(\alpha-1)}{2 !} x^{2}+\cdots+\frac{\alpha(\alpha-1) \cdots(\alpha-n+1)}{n !} x^{n}+o\left(x^{n}\right) .
\end{aligned}\]</span></p>
<h3 id="洛必达法则">洛必达法则</h3>
<p>若函数 <span class="math inline">\(f(x)\)</span> 和 <span class="math inline">\(g(x)\)</span> 满足</p>
<ol type="1">
<li><span class="math inline">\(x \to a\)</span>，<span class="math inline">\(\lim f(x)=0(\text{或}\infty)\)</span>，<span class="math inline">\(\lim g(x)=0(\text{或}\infty)\)</span></li>
<li><span class="math inline">\(x \in \mathring{U}(a)\)</span>，<span class="math inline">\(f’(x)\)</span> 和 <span class="math inline">\(g’(x)\)</span> 都存在，<span class="math inline">\(g’(x) \ne 0\)</span></li>
<li><span class="math inline">\(x \to a\)</span>，<span class="math inline">\(\lim \frac{f’(x)}{g’(x)}=A(A\text{为实数或}\infty)\)</span></li>
</ol>
<p>则 <span class="math display">\[\lim_{x \to a}\frac{f(x)}{g(x)}=\lim_{x \to a}\frac{f’(x)}{g’(x)}=A.\]</span> 对于 <span class="math inline">\(\frac{0}{0}/\frac{\infty}{\infty}/0 \cdot \infty/\infty-\infty/1^\infty/0^0/\infty^0\)</span> 这七种情况均可使用洛必达法则求极限。</p>
<h2 id="微分中值定理的应用">微分中值定理的应用</h2>
<h1 id="零点问题与微分不等式">零点问题与微分不等式</h1>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>高等数学</tag>
      </tags>
  </entry>
  <entry>
    <title>高等数学笔记_函数与极限</title>
    <url>/2022/02/28/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6_%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/</url>
    <content><![CDATA[<p>高等数学<strong>函数与极限</strong>部分的知识总结<br />
内容包括：</p>
<ol type="1">
<li>数列的极限、求数列极限的方法</li>
<li>函数的极限、求函数极限的方法</li>
<li>函数的连续性和间断点的判断
<hr>
<span id="more"></span></li>
</ol>
<p><strong>本文索引</strong></p>
<ul>
<li><a href="#数列的极限">数列的极限</a>
<ul>
<li><a href="#定义和性质">定义和性质</a>
<ul>
<li><a href="#定义">定义</a></li>
<li><a href="#性质">性质</a></li>
</ul></li>
<li><a href="#求数列极限的方法">求数列极限的方法</a></li>
</ul></li>
<li><a href="#函数的极限">函数的极限</a>
<ul>
<li><a href="#定义和性质-1">定义和性质</a>
<ul>
<li><a href="#定义-1">定义</a></li>
<li><a href="#性质-1">性质</a></li>
</ul></li>
<li><a href="#求函数极限的方法">求函数极限的方法</a>
<ul>
<li><a href="#极限存在准则">极限存在准则</a></li>
<li><a href="#无穷小与无穷大">无穷小与无穷大</a></li>
<li><a href="#无穷的比较">无穷的比较</a></li>
<li><a href="#泰勒公式">泰勒公式</a></li>
<li><a href="#洛必达法则">洛必达法则</a></li>
</ul></li>
</ul></li>
<li><a href="#函数的连续与间断">函数的连续与间断</a>
<ul>
<li><a href="#连续性">连续性</a></li>
<li><a href="#间断点">间断点</a></li>
</ul></li>
<li><a href="#连续函数的性质">连续函数的性质</a>
<ul>
<li><a href="#连续性运算法则">连续性运算法则</a></li>
<li><a href="#闭区间上的连续函数定理">闭区间上的连续函数定理</a>
<ul>
<li><a href="#有界性与最值定理">有界性与最值定理</a></li>
<li><a href="#介值定理">介值定理</a></li>
<li><a href="#零点定理">零点定理</a></li>
</ul></li>
</ul></li>
</ul>
<hr>
<h1 id="数列的极限">数列的极限</h1>
<h2 id="定义和性质">定义和性质</h2>
<h3 id="定义">定义</h3>
<p><span class="math display">\[\lim x_n=a \Leftrightarrow  {\forall\varepsilon&gt;0,\exists N\in \textbf{N}^+,当n&gt;N时,恒有\left |x_n-a  \right |&lt;0. }\]</span> 若数列 {x<sub>n</sub>} 存在极限 a，则称数列 {x<sub>n</sub>} 收敛于 a，否则称数列 {x<sub>n</sub>} 是发散的。</p>
<h3 id="性质">性质</h3>
<ul>
<li><p><strong>定理</strong>：若 {x<sub>n</sub>} 收敛于 a，则其子列也收敛于 a.</p>
<blockquote>
<p>在数列 {x<sub>n</sub>} 中选取无穷多项，按照原来的先后顺序排列成的新数列成为 {x<sub>n</sub>} 的<strong>子列</strong>。</p>
</blockquote></li>
</ul>
<h2 id="求数列极限的方法">求数列极限的方法</h2>
<h1 id="函数的极限">函数的极限</h1>
<h2 id="定义和性质-1">定义和性质</h2>
<h3 id="定义-1">定义</h3>
<h3 id="性质-1">性质</h3>
<h2 id="求函数极限的方法">求函数极限的方法</h2>
<h3 id="极限存在准则">极限存在准则</h3>
<h3 id="无穷小与无穷大">无穷小与无穷大</h3>
<h3 id="无穷的比较">无穷的比较</h3>
<h3 id="泰勒公式">泰勒公式</h3>
<h3 id="洛必达法则">洛必达法则</h3>
<h1 id="函数的连续与间断">函数的连续与间断</h1>
<h2 id="连续性">连续性</h2>
<h2 id="间断点">间断点</h2>
<h1 id="连续函数的性质">连续函数的性质</h1>
<h2 id="连续性运算法则">连续性运算法则</h2>
<h2 id="闭区间上的连续函数定理">闭区间上的连续函数定理</h2>
<h3 id="有界性与最值定理">有界性与最值定理</h3>
<p><span class="math inline">\(y=f(x)\)</span> 在 <span class="math inline">\([a,b]\)</span> 上连续，则在 <span class="math inline">\([a,b]\)</span> 上一定有界，且存在最大值和最小值。</p>
<h3 id="介值定理">介值定理</h3>
<p><span class="math inline">\(y=f(x)\)</span> 在 <span class="math inline">\([a,b]\)</span> 上连续，则 <span class="math display">\[\forall \mu \in (min(f(a),f(b)),max(f(a),f(b))，\exists \xi \in (a,b)，\text{使得} f(\xi) = \mu.\]</span></p>
<p><strong>推论1</strong><br />
<span class="math inline">\(y=f(x)\)</span> 在 <span class="math inline">\([a,b]\)</span> 上连续，M 和 m 为最大值和最小值，则 <span class="math display">\[\forall m \le \mu \le M\text{，}\exists \xi \in [a,b]\text{，使得} f(\xi)= \mu.\]</span></p>
<p><strong>推论2 平均值定理</strong><br />
<span class="math inline">\(y=f(x)\)</span> 在 <span class="math inline">\([a,b]\)</span> 上连续，<span class="math inline">\(a&lt;x_1&lt;x_2&lt;…&lt;x_n\)</span>，则 <span class="math inline">\(\exists \xi \in [x_1, x_n]\)</span>，使得 <span class="math display">\[f(\xi) = \frac {f(x_1)+f(x_2)+…+f(x_n)}{n}.\]</span></p>
<h3 id="零点定理">零点定理</h3>
<p><span class="math inline">\(y=f(x)\)</span> 在 <span class="math inline">\([a,b]\)</span> 上连续，<span class="math inline">\(f(a) \cdot f(b)&lt;0\)</span>，则 <span class="math display">\[\exists \xi \in (a,b)，\text{使得} f(\xi) = 0.\]</span></p>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>高等数学</tag>
      </tags>
  </entry>
  <entry>
    <title>高等数学_连续函数的十大定理</title>
    <url>/2022/03/11/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6_%E8%BF%9E%E7%BB%AD%E5%87%BD%E6%95%B0%E5%8D%81%E5%A4%A7%E5%AE%9A%E7%90%86/</url>
    <content><![CDATA[连续函数的十大定理：<br />
有界性与最值定理、介值定理、零点定理、费马引理、罗尔定理、拉格朗日中值定理、柯西中值定理、泰勒中值定理、洛必达法则、积分中值定理。
<hr>
<span id="more"></span>
<p><strong>本文索引</strong></p>
<ul>
<li><a href="#有界性与最值定理">有界性与最值定理</a></li>
<li><a href="#介值定理">介值定理</a></li>
<li><a href="#零点定理">零点定理</a></li>
<li><a href="#费马引理">费马引理</a></li>
<li><a href="#罗尔定理">罗尔定理</a></li>
<li><a href="#拉格朗日中值定理">拉格朗日中值定理</a></li>
<li><a href="#柯西中值定理">柯西中值定理</a></li>
<li><a href="#洛必达法则">洛必达法则</a></li>
<li><a href="#泰勒中值定理">泰勒中值定理</a></li>
<li><a href="#积分中值定理">积分中值定理</a></li>
</ul>
<hr>
<h1 id="有界性与最值定理">有界性与最值定理</h1>
<p><span class="math inline">\(f(x)\)</span> 在闭区间 [a,b] 上连续，则一定有界，且存在最大值和最小值。</p>
<h1 id="介值定理">介值定理</h1>
<p><span class="math inline">\(f(x)\)</span> 在闭区间 [a,b] 上连续，则 <span class="math display">\[\forall \mu \in (min(f(a),f(b)),max(f(a),f(b))，\exists \xi \in [a,b]，\text{使得} f(\xi) = \mu.\]</span></p>
<p><strong>推论：平均值定理</strong><br />
<span class="math inline">\(f(x)\)</span> 在闭区间 [a,b] 上连续，<span class="math inline">\(a&lt;x_1&lt;x_2&lt;…&lt;x_n\)</span>，则 <span class="math inline">\(\exists \xi \in [x_1, x_n]\)</span>，使得 <span class="math display">\[f(\xi) = \frac {f(x_1)+f(x_2)+…+f(x_n)}{n}.\]</span></p>
<h1 id="零点定理">零点定理</h1>
<p><span class="math inline">\(f(x)\)</span> 在闭区间 [a,b] 上连续，<span class="math inline">\(f(a) \cdot f(b)&lt;0\)</span>，则 <span class="math display">\[\exists \xi \in (a,b)，\text{使得} f(\xi) = 0.\]</span></p>
<h1 id="费马引理">费马引理</h1>
<p><span class="math inline">\(f(x)\)</span> 在某领域 <span class="math inline">\(U(\xi)\)</span> 有定义且在 <span class="math inline">\(\xi\)</span> 处可导，若 <span class="math inline">\(\forall x \in U(\xi)\)</span>，都有 <span class="math display">\[f(x) \ge f(\xi)(\text{或} f(x) \le f(\xi))，\]</span> 则 <span class="math inline">\(f’(\xi)=0\)</span>.</p>
<blockquote>
<p><strong>证</strong></p>
</blockquote>
<h1 id="罗尔定理">罗尔定理</h1>
<p><span class="math inline">\(f(x)\)</span> 满足</p>
<ol type="1">
<li>在 [a,b] 上连续</li>
<li>在 (a,b) 上可导</li>
<li><span class="math inline">\(f(a)=f(b)\)</span></li>
</ol>
<p>则 <span class="math display">\[\exists \xi \in (a,b)，\text{使得}f’(\xi)=0.\]</span> <strong>推论</strong></p>
<h1 id="拉格朗日中值定理">拉格朗日中值定理</h1>
<p><span class="math inline">\(f(x)\)</span> 满足</p>
<ol type="1">
<li>在 [a,b] 上连续</li>
<li>在 (a,b) 上可导</li>
</ol>
<p>则 <span class="math inline">\(\exists \xi \in (a,b)\)</span>，使得 <span class="math display">\[f(b)-f(a)=f’(\xi)(b-a)，\]</span> 或写成 <span class="math display">\[f’(\xi)= \frac{f(b)-f(a)}{b-a}.\]</span></p>
<h1 id="柯西中值定理">柯西中值定理</h1>
<p><span class="math inline">\(f(x)\)</span> 和 <span class="math inline">\(g(x)\)</span> 满足</p>
<ol type="1">
<li>在 [a,b] 上连续<br />
</li>
<li>在 (a,b) 上可导</li>
<li><span class="math inline">\(g’(x) \ne 0\)</span></li>
</ol>
<p>则 <span class="math inline">\(\exists \xi \in (a,b)\)</span>，使得 <span class="math display">\[\frac{f(b)-f(a)}{g(b)-g(a)}=\frac{f’(\xi)}{g’(\xi)}.\]</span></p>
<h1 id="洛必达法则">洛必达法则</h1>
<p><span class="math inline">\(f(x)\)</span> 和 <span class="math inline">\(g(x)\)</span> 满足</p>
<ol type="1">
<li><span class="math inline">\(x \to a\)</span>，<span class="math inline">\(\lim f(x)=0(\text{或}\infty)\)</span>，<span class="math inline">\(\lim g(x)=0(\text{或}\infty)\)</span></li>
<li><span class="math inline">\(x \in \mathring{U}(a)\)</span>，<span class="math inline">\(f’(x)\)</span> 和 <span class="math inline">\(g’(x)\)</span> 都存在，<span class="math inline">\(g’(x) \ne 0\)</span></li>
<li><span class="math inline">\(x \to a\)</span>，<span class="math inline">\(\lim \frac{f’(x)}{g’(x)}=A(A\text{为实数或}\infty)\)</span></li>
</ol>
<p>则 <span class="math display">\[\lim_{x \to a}\frac{f(x)}{g(x)}=\lim_{x \to a}\frac{f’(x)}{g’(x)}=A.\]</span> 对于 <span class="math inline">\(\frac{0}{0}/\frac{\infty}{\infty}/0 \cdot \infty/\infty-\infty/1^\infty/0^0/\infty^0\)</span> 七种情况均可使用洛必达法则求极限。</p>
<h1 id="泰勒中值定理">泰勒中值定理</h1>
<p>若 <span class="math inline">\(f(x)\)</span> 在 <span class="math inline">\(x_0\)</span> 处可导，当 <span class="math inline">\(x \to x_0\)</span> 时 <span class="math display">\[f(x)-f(x_0)=f’(x_0)(x-x_0)+o(x-x_0)\]</span> 即 <span class="math display">\[f(x)=f(x_0)+f’(x_0)(x-x_0)+o(x-x_0)\]</span> 更加一般的，若 <span class="math inline">\(f(x)\)</span> 在 (a,b) 上具有 n+1 阶导数，<span class="math inline">\(x_0 \in (a,b)\)</span>，则 <span class="math display">\[f(x) = f(x_0)+f’(x_0)(x-x_0)+\frac{f’’(x_0)(x-x_0)^2}{2!}+…\]</span> <span class="math display">\[+\frac{f^{(n)}(x_0)(x-x_0)^n}{n!}+\frac{f^{(n+1)}(\xi)(x-x_0)^{n+1}}{(n+1)!}(\text{拉格朗日余项}).\]</span> 其中 <span class="math inline">\(\xi\)</span> 位于 <span class="math inline">\(x\)</span> 与 <span class="math inline">\(x_0\)</span> 之间。</p>
<h1 id="积分中值定理">积分中值定理</h1>
<p><span class="math inline">\(f(x)\)</span> 在 [a,b] 上连续，则 <span class="math inline">\(\exists \xi \in [a,b]\)</span>，使得 <span class="math display">\[\int_{a}^{b} f(x)dx = f(\xi)(b-a).\]</span></p>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>高等数学</tag>
      </tags>
  </entry>
</search>
